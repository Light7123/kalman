
kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000005f4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000650  20000650  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014319  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003022  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001170  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d98  00000000  00000000  00038580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024e40  00000000  00000000  00039318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000163fe  00000000  00000000  0005e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdec4  00000000  00000000  00074556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050d0  00000000  00000000  0014241c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001474ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c90 	.word	0x08008c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008c90 	.word	0x08008c90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <_ZN7GKalmanC1Efff>:
	return xk_1;
}

// ***************************** GKalman *****************************

GKalman::GKalman(float mea_e, float est_e, float q) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000db4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000db8:	ed87 1a00 	vstr	s2, [r7]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
	GKalman::setParameters(mea_e, est_e, q);
 8000ddc:	ed97 1a00 	vldr	s2, [r7]
 8000de0:	edd7 0a01 	vldr	s1, [r7, #4]
 8000de4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f805 	bl	8000df8 <_ZN7GKalman13setParametersEfff>
}
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_ZN7GKalman13setParametersEfff>:
GKalman::GKalman(float mea_e, float q) {
	GKalman::setParameters(mea_e, mea_e, q);
}

void GKalman::setParameters(float mea_e, float est_e, float q) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e04:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e08:	ed87 1a00 	vstr	s2, [r7]
	_err_measure = mea_e;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	601a      	str	r2, [r3, #0]
	_err_estimate = est_e;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
	_q = q;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	609a      	str	r2, [r3, #8]
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_ZN7GKalman8filteredEf>:
void GKalman::setParameters(float mea_e, float q) {
	GKalman::setParameters(mea_e, mea_e, q);
}

float GKalman::filtered(float value) {
 8000e2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	ed87 0a00 	vstr	s0, [r7]
	float _kalman_gain, _current_estimate;
	_kalman_gain = _err_estimate / (_err_estimate + _err_measure);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	edc7 7a03 	vstr	s15, [r7, #12]
	_current_estimate = _last_estimate + _kalman_gain * (value - _last_estimate);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e64:	edd7 6a00 	vldr	s13, [r7]
 8000e68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e78:	edc7 7a02 	vstr	s15, [r7, #8]
	_err_estimate =  (1.0 - _kalman_gain)*_err_estimate + fabs(_last_estimate-_current_estimate)*_q;
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff fb5b 	bl	8000538 <__aeabi_f2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	f04f 0000 	mov.w	r0, #0
 8000e8a:	4925      	ldr	r1, [pc, #148]	; (8000f20 <_ZN7GKalman8filteredEf+0xf4>)
 8000e8c:	f7ff f9f4 	bl	8000278 <__aeabi_dsub>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4614      	mov	r4, r2
 8000e96:	461d      	mov	r5, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb4b 	bl	8000538 <__aeabi_f2d>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	f7ff fb9d 	bl	80005e8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	eef0 7ae7 	vabs.f32	s15, s15
 8000ec8:	ee17 0a90 	vmov	r0, s15
 8000ecc:	f7ff fb34 	bl	8000538 <__aeabi_f2d>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	460d      	mov	r5, r1
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fb2d 	bl	8000538 <__aeabi_f2d>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	f7ff fb7f 	bl	80005e8 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4640      	mov	r0, r8
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	f7ff f9c3 	bl	800027c <__adddf3>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fd85 	bl	8000a0c <__aeabi_d2f>
 8000f02:	4602      	mov	r2, r0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	605a      	str	r2, [r3, #4]
	_last_estimate=_current_estimate;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	60da      	str	r2, [r3, #12]

	return _current_estimate;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	ee07 3a90 	vmov	s15, r3
}
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f20:	3ff00000 	.word	0x3ff00000

08000f24 <adxl_read_values>:
	data[1] = value;
	HAL_I2C_Master_Transmit (&hi2c3, adxl_address, data, 2, 100);
}

void adxl_read_values (uint8_t reg)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c3, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	2364      	movs	r3, #100	; 0x64
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2306      	movs	r3, #6
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <adxl_read_values+0x2c>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	21a6      	movs	r1, #166	; 0xa6
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <adxl_read_values+0x30>)
 8000f44:	f002 fdce 	bl	8003ae4 <HAL_I2C_Mem_Read>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000078 	.word	0x20000078
 8000f54:	20000080 	.word	0x20000080

08000f58 <adxl_readx>:
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz

}

int16_t adxl_readx(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	int16_t x;
	adxl_read_values (0x32);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f7ff ffe0 	bl	8000f24 <adxl_read_values>
	x = ((data_rec[1]<<8)|data_rec[0]);
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <adxl_readx+0x2c>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <adxl_readx+0x2c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	80fb      	strh	r3, [r7, #6]
	return x;
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000078 	.word	0x20000078

08000f88 <adxl_ready>:

int16_t adxl_ready(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	int16_t y;
	adxl_read_values (0x32);
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f7ff ffc8 	bl	8000f24 <adxl_read_values>
	y = ((data_rec[3]<<8)|data_rec[2]);
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <adxl_ready+0x2c>)
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <adxl_ready+0x2c>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
	return y;
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000078 	.word	0x20000078

08000fb8 <adxl_readz>:

int16_t adxl_readz(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	int16_t z;
	adxl_read_values (0x32);
 8000fbe:	2032      	movs	r0, #50	; 0x32
 8000fc0:	f7ff ffb0 	bl	8000f24 <adxl_read_values>
	z = ((data_rec[5]<<8)|data_rec[4]);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <adxl_readz+0x2c>)
 8000fc6:	795b      	ldrb	r3, [r3, #5]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <adxl_readz+0x2c>)
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	80fb      	strh	r3, [r7, #6]
	return z;
 8000fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000078 	.word	0x20000078

08000fe8 <_Z9UARTPrintPKcz>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UARTPrint(const char *args, ...) //отладка идет в монетоприемник
{
 8000fe8:	b40f      	push	{r0, r1, r2, r3}
 8000fea:	b580      	push	{r7, lr}
 8000fec:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000ff0:	af00      	add	r7, sp, #0
	char StrBuff[1024];
	va_list ap;
	va_start(ap, args);
 8000ff2:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000ff6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000ffa:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000ffe:	601a      	str	r2, [r3, #0]
	char len = vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 8001000:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001004:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001008:	f107 0008 	add.w	r0, r7, #8
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	f007 f9a9 	bl	800836c <vsniprintf>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	va_end(ap);
	int timeout = sizeof(StrBuff) / 3;
 8001020:	f240 1355 	movw	r3, #341	; 0x155
 8001024:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	HAL_UART_Transmit(&huart2,(uint8_t*)StrBuff,len,timeout);
 8001028:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800102c:	b29a      	uxth	r2, r3
 800102e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001032:	f107 0108 	add.w	r1, r7, #8
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <_Z9UARTPrintPKcz+0x64>)
 8001038:	f006 fa00 	bl	800743c <HAL_UART_Transmit>
}
 800103c:	bf00      	nop
 800103e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001042:	46bd      	mov	sp, r7
 8001044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001048:	b004      	add	sp, #16
 800104a:	4770      	bx	lr
 800104c:	20000174 	.word	0x20000174

08001050 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	b0a9      	sub	sp, #164	; 0xa4
 8001054:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001056:	f000 fec3 	bl	8001de0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800105a:	f000 f8ed 	bl	8001238 <_Z18SystemClock_Configv>
	 * Подключен датчик ADXL345 по I2C3 PA8-SCL PC9-SDA
	 * Вывод данных в uart2 PA2-TX
	 */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800105e:	f000 fa85 	bl	800156c <_ZL12MX_GPIO_Initv>
	MX_I2S3_Init();
 8001062:	f000 f991 	bl	8001388 <_ZL12MX_I2S3_Initv>
	MX_SPI1_Init();
 8001066:	f000 f9c3 	bl	80013f0 <_ZL12MX_SPI1_Initv>
	MX_USB_OTG_FS_HCD_Init();
 800106a:	f000 fa59 	bl	8001520 <_ZL22MX_USB_OTG_FS_HCD_Initv>
	MX_I2C3_Init();
 800106e:	f000 f957 	bl	8001320 <_ZL12MX_I2C3_Initv>
	MX_USART3_UART_Init();
 8001072:	f000 fa27 	bl	80014c4 <_ZL19MX_USART3_UART_Initv>
	MX_USART2_UART_Init();
 8001076:	f000 f9f7 	bl	8001468 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */
	int16_t x=0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	int16_t y=0;
 8001080:	2300      	movs	r3, #0
 8001082:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	int16_t  z=0;
 8001086:	2300      	movs	r3, #0
 8001088:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	int16_t x_filtred=0;
 800108c:	2300      	movs	r3, #0
 800108e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	int16_t y_filtred=0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t z_filtred=0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	char uart_output[70];

	uint16_t razbros_kalman = 40;
 800109e:	2328      	movs	r3, #40	; 0x28
 80010a0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	float speed_kalman_prev, speed_kalman = 0.1;
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <main+0x1dc>)
 80010a6:	67fb      	str	r3, [r7, #124]	; 0x7c


	GKalman adxl_Filter_x(razbros_kalman, razbros_kalman, speed_kalman);//фильтр для оси x
 80010a8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80010b8:	ee07 3a10 	vmov	s14, r3
 80010bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 80010c8:	eef0 0a47 	vmov.f32	s1, s14
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe69 	bl	8000da8 <_ZN7GKalmanC1Efff>
	GKalman adxl_Filter_y(razbros_kalman, razbros_kalman, speed_kalman);//фильтр для оси y
 80010d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80010e6:	ee07 3a10 	vmov	s14, r3
 80010ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 80010f6:	eef0 0a47 	vmov.f32	s1, s14
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe52 	bl	8000da8 <_ZN7GKalmanC1Efff>
	GKalman adxl_Filter_z(razbros_kalman, razbros_kalman, speed_kalman);//фильтр для оси z
 8001104:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001110:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001114:	ee07 3a10 	vmov	s14, r3
 8001118:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 8001122:	eef0 0a47 	vmov.f32	s1, s14
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe3c 	bl	8000da8 <_ZN7GKalmanC1Efff>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(HAL_GetTick()%1000==0)
 8001130:	f000 febc 	bl	8001eac <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <main+0x1e0>)
 8001138:	fba3 1302 	umull	r1, r3, r3, r2
 800113c:	099b      	lsrs	r3, r3, #6
 800113e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0ec      	beq.n	8001130 <main+0xe0>
		{
		x=adxl_readx();//считываем значения акселерометра по x
 8001156:	f7ff feff 	bl	8000f58 <adxl_readx>
 800115a:	4603      	mov	r3, r0
 800115c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		y=adxl_ready();//считываем значения акселерометра по y
 8001160:	f7ff ff12 	bl	8000f88 <adxl_ready>
 8001164:	4603      	mov	r3, r0
 8001166:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		z=adxl_readz();//считываем значения акселерометра по z
 800116a:	f7ff ff25 	bl	8000fb8 <adxl_readz>
 800116e:	4603      	mov	r3, r0
 8001170:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		x_filtred=adxl_Filter_x.filtered(x);//фильтруем значения акселерометра по x
 8001174:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe4f 	bl	8000e2c <_ZN7GKalman8filteredEf>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001196:	ee17 3a90 	vmov	r3, s15
 800119a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		y_filtred=adxl_Filter_y.filtered(y);//фильтруем значения акселерометра по y
 800119e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe3a 	bl	8000e2c <_ZN7GKalman8filteredEf>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		z_filtred=adxl_Filter_z.filtered(z);//фильтруем  значения акселерометра по z
 80011c8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe26 	bl	8000e2c <_ZN7GKalman8filteredEf>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 3a90 	vmov	r3, s15
 80011ec:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		sprintf(uart_output,"x: %d y: %d z: %d \nx_filtr: %d y_filtr: %d z_filtr: %d\n\n",x,y,z,x_filtred,y_filtred,z_filtred);
 80011f0:	f9b7 508e 	ldrsh.w	r5, [r7, #142]	; 0x8e
 80011f4:	f9b7 608c 	ldrsh.w	r6, [r7, #140]	; 0x8c
 80011f8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80011fc:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8001200:	f9b7 1086 	ldrsh.w	r1, [r7, #134]	; 0x86
 8001204:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8001208:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800120c:	9003      	str	r0, [sp, #12]
 800120e:	9102      	str	r1, [sp, #8]
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4633      	mov	r3, r6
 8001216:	462a      	mov	r2, r5
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <main+0x1e4>)
 800121a:	4620      	mov	r0, r4
 800121c:	f007 f85a 	bl	80082d4 <siprintf>
		UARTPrint(uart_output);
 8001220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fedf 	bl	8000fe8 <_Z9UARTPrintPKcz>
		if(HAL_GetTick()%1000==0)
 800122a:	e781      	b.n	8001130 <main+0xe0>
 800122c:	3dcccccd 	.word	0x3dcccccd
 8001230:	10624dd3 	.word	0x10624dd3
 8001234:	08008ca8 	.word	0x08008ca8

08001238 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	; 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f007 f89e 	bl	8008388 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <_Z18SystemClock_Configv+0xe0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a2c      	ldr	r2, [pc, #176]	; (8001318 <_Z18SystemClock_Configv+0xe0>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <_Z18SystemClock_Configv+0xe0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <_Z18SystemClock_Configv+0xe4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <_Z18SystemClock_Configv+0xe4>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <_Z18SystemClock_Configv+0xe4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012a8:	2308      	movs	r3, #8
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fa0e 	bl	80066e0 <HAL_RCC_OscConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <_Z18SystemClock_Configv+0xa0>
	{
		Error_Handler();
 80012d4:	f000 fa58 	bl	8001788 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2105      	movs	r1, #5
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 fc6a 	bl	8006bd0 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <_Z18SystemClock_Configv+0xd8>
	{
		Error_Handler();
 800130c:	f000 fa3c 	bl	8001788 <Error_Handler>
	}
}
 8001310:	bf00      	nop
 8001312:	3750      	adds	r7, #80	; 0x50
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <_ZL12MX_I2C3_Initv>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <_ZL12MX_I2C3_Initv+0x60>)
 8001328:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <_ZL12MX_I2C3_Initv+0x64>)
 800132e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <_ZL12MX_I2C3_Initv+0x5c>)
 800135e:	f002 fa7d 	bl	800385c <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <_ZL12MX_I2C3_Initv+0x56>
	{
		Error_Handler();
 8001372:	f000 fa09 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000080 	.word	0x20000080
 8001380:	40005c00 	.word	0x40005c00
 8001384:	000186a0 	.word	0x000186a0

08001388 <_ZL12MX_I2S3_Initv>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <_ZL12MX_I2S3_Initv+0x60>)
 8001390:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <_ZL12MX_I2S3_Initv+0x64>)
 80013b2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <_ZL12MX_I2S3_Initv+0x5c>)
 80013c8:	f004 fcea 	bl	8005da0 <HAL_I2S_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <_ZL12MX_I2S3_Initv+0x58>
	{
		Error_Handler();
 80013dc:	f000 f9d4 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000d4 	.word	0x200000d4
 80013e8:	40003c00 	.word	0x40003c00
 80013ec:	00017700 	.word	0x00017700

080013f0 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <_ZL12MX_SPI1_Initv+0x74>)
 80013f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 80013fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001400:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <_ZL12MX_SPI1_Initv+0x70>)
 8001442:	f005 ff25 	bl	8007290 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 8001456:	f000 f997 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000011c 	.word	0x2000011c
 8001464:	40013000 	.word	0x40013000

08001468 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001470:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014a0:	f005 ff7f 	bl	80073a2 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 80014b4:	f000 f968 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000174 	.word	0x20000174
 80014c0:	40004400 	.word	0x40004400

080014c4 <_ZL19MX_USART3_UART_Initv>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <_ZL19MX_USART3_UART_Initv+0x58>)
 80014cc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <_ZL19MX_USART3_UART_Initv+0x54>)
 80014fc:	f005 ff51 	bl	80073a2 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZL19MX_USART3_UART_Initv+0x50>
	{
		Error_Handler();
 8001510:	f000 f93a 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001b8 	.word	0x200001b8
 800151c:	40004800 	.word	0x40004800

08001520 <_ZL22MX_USB_OTG_FS_HCD_Initv>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8001526:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800152a:	601a      	str	r2, [r3, #0]
	hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 800152e:	2208      	movs	r2, #8
 8001530:	609a      	str	r2, [r3, #8]
	hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
	hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
	hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8001540:	2202      	movs	r2, #2
 8001542:	619a      	str	r2, [r3, #24]
	hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
	if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 800154c:	f000 ffd5 	bl	80024fa <HAL_HCD_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf14      	ite	ne
 8001556:	2301      	movne	r3, #1
 8001558:	2300      	moveq	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x44>
	{
		Error_Handler();
 8001560:	f000 f912 	bl	8001788 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001fc 	.word	0x200001fc

0800156c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	4b7a      	ldr	r3, [pc, #488]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a79      	ldr	r2, [pc, #484]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	4b73      	ldr	r3, [pc, #460]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a72      	ldr	r2, [pc, #456]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b70      	ldr	r3, [pc, #448]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a6b      	ldr	r2, [pc, #428]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b69      	ldr	r3, [pc, #420]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a64      	ldr	r2, [pc, #400]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b57      	ldr	r3, [pc, #348]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a56      	ldr	r2, [pc, #344]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b54      	ldr	r3, [pc, #336]	; (8001770 <_ZL12MX_GPIO_Initv+0x204>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2108      	movs	r1, #8
 800162e:	4851      	ldr	r0, [pc, #324]	; (8001774 <_ZL12MX_GPIO_Initv+0x208>)
 8001630:	f000 ff4a 	bl	80024c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <_ZL12MX_GPIO_Initv+0x20c>)
 800163a:	f000 ff45 	bl	80024c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800163e:	2200      	movs	r2, #0
 8001640:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001644:	484d      	ldr	r0, [pc, #308]	; (800177c <_ZL12MX_GPIO_Initv+0x210>)
 8001646:	f000 ff3f 	bl	80024c8 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800164a:	2308      	movs	r3, #8
 800164c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4844      	ldr	r0, [pc, #272]	; (8001774 <_ZL12MX_GPIO_Initv+0x208>)
 8001662:	f000 fd95 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001666:	2301      	movs	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	483e      	ldr	r0, [pc, #248]	; (8001778 <_ZL12MX_GPIO_Initv+0x20c>)
 800167e:	f000 fd87 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001682:	2308      	movs	r3, #8
 8001684:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001692:	2305      	movs	r3, #5
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4836      	ldr	r0, [pc, #216]	; (8001778 <_ZL12MX_GPIO_Initv+0x20c>)
 800169e:	f000 fd77 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4832      	ldr	r0, [pc, #200]	; (8001780 <_ZL12MX_GPIO_Initv+0x214>)
 80016b8:	f000 fd6a 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80016bc:	2304      	movs	r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	482d      	ldr	r0, [pc, #180]	; (8001784 <_ZL12MX_GPIO_Initv+0x218>)
 80016d0:	f000 fd5e 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e6:	2305      	movs	r3, #5
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4824      	ldr	r0, [pc, #144]	; (8001784 <_ZL12MX_GPIO_Initv+0x218>)
 80016f2:	f000 fd4d 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016fa:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	481b      	ldr	r0, [pc, #108]	; (800177c <_ZL12MX_GPIO_Initv+0x210>)
 8001710:	f000 fd3e 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001714:	2320      	movs	r3, #32
 8001716:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4815      	ldr	r0, [pc, #84]	; (800177c <_ZL12MX_GPIO_Initv+0x210>)
 8001728:	f000 fd32 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800172c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001730:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001736:	2301      	movs	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173e:	2304      	movs	r3, #4
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <_ZL12MX_GPIO_Initv+0x218>)
 800174a:	f000 fd21 	bl	8002190 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001752:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001756:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <_ZL12MX_GPIO_Initv+0x208>)
 8001764:	f000 fd14 	bl	8002190 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	; 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40021000 	.word	0x40021000
 8001778:	40020800 	.word	0x40020800
 800177c:	40020c00 	.word	0x40020c00
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400

08001788 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fc6a 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_I2C_MspInit+0xe4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d15b      	bne.n	80018be <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001844:	2312      	movs	r3, #18
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001850:	2304      	movs	r3, #4
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <HAL_I2C_MspInit+0xec>)
 800185c:	f000 fc98 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4815      	ldr	r0, [pc, #84]	; (80018d4 <HAL_I2C_MspInit+0xf0>)
 800187e:	f000 fc87 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 800188c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_I2C_MspInit+0xe8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2048      	movs	r0, #72	; 0x48
 80018a4:	f000 fc0d 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80018a8:	2048      	movs	r0, #72	; 0x48
 80018aa:	f000 fc26 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2049      	movs	r0, #73	; 0x49
 80018b4:	f000 fc05 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80018b8:	2049      	movs	r0, #73	; 0x49
 80018ba:	f000 fc1e 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005c00 	.word	0x40005c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_I2S_MspInit+0xf0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d15a      	bne.n	80019be <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001908:	2301      	movs	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800190c:	23c0      	movs	r3, #192	; 0xc0
 800190e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001910:	2302      	movs	r3, #2
 8001912:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fb79 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001924:	f7ff ff30 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 8001932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_I2S_MspInit+0xf4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800197c:	2310      	movs	r3, #16
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800198c:	2306      	movs	r3, #6
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <HAL_I2S_MspInit+0xf8>)
 8001998:	f000 fbfa 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800199c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ae:	2306      	movs	r3, #6
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <HAL_I2S_MspInit+0xfc>)
 80019ba:	f000 fbe9 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3738      	adds	r7, #56	; 0x38
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40003c00 	.word	0x40003c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020800 	.word	0x40020800

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_SPI_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x8c>)
 8001a4e:	f000 fb9f 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_UART_MspInit+0x128>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12c      	bne.n	8001ae4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a40      	ldr	r2, [pc, #256]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	482e      	ldr	r0, [pc, #184]	; (8001b98 <HAL_UART_MspInit+0x130>)
 8001ade:	f000 fb57 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae2:	e050      	b.n	8001b86 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2c      	ldr	r2, [pc, #176]	; (8001b9c <HAL_UART_MspInit+0x134>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d14b      	bne.n	8001b86 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x12c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <HAL_UART_MspInit+0x138>)
 8001b60:	f000 fb16 	bl	8002190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b76:	2307      	movs	r3, #7
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <HAL_UART_MspInit+0x13c>)
 8001b82:	f000 fb05 	bl	8002190 <HAL_GPIO_Init>
}
 8001b86:	bf00      	nop
 8001b88:	3730      	adds	r7, #48	; 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40004800 	.word	0x40004800
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d147      	bne.n	8001c5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <HAL_HCD_MspInit+0xc0>)
 8001bfc:	f000 fac8 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c12:	230a      	movs	r3, #10
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4812      	ldr	r0, [pc, #72]	; (8001c68 <HAL_HCD_MspInit+0xc0>)
 8001c1e:	f000 fab7 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_HCD_MspInit+0xbc>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2043      	movs	r0, #67	; 0x43
 8001c50:	f000 fa37 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001c54:	2043      	movs	r0, #67	; 0x43
 8001c56:	f000 fa50 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f8e4 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <OTG_FS_IRQHandler+0x10>)
 8001cc6:	f000 fc7a 	bl	80025be <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001fc 	.word	0x200001fc

08001cd4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <I2C3_EV_IRQHandler+0x10>)
 8001cda:	f002 f929 	bl	8003f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000080 	.word	0x20000080

08001ce8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <I2C3_ER_IRQHandler+0x10>)
 8001cee:	f002 fa72 	bl	80041d6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000080 	.word	0x20000080

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f006 fb34 	bl	8008398 <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20020000 	.word	0x20020000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	20000500 	.word	0x20000500
 8001d64:	20000650 	.word	0x20000650

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x20>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <SystemInit+0x20>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ffd7 	bl	8001d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f006 faf3 	bl	80083a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff f947 	bl	8001050 <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001dd0:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8001dd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001dd8:	20000650 	.word	0x20000650

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_Init+0x40>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_Init+0x40>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_Init+0x40>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f94f 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f808 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fcbe 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f967 	bl	8002116 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	f000 f92f 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000504 	.word	0x20000504

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000504 	.word	0x20000504

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000008 	.word	0x20000008

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d004      	beq.n	800214c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e00c      	b.n	8002166 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2205      	movs	r2, #5
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e16b      	b.n	8002484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 815a 	bne.w	800247e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80b4 	beq.w	800247e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b60      	ldr	r3, [pc, #384]	; (800249c <HAL_GPIO_Init+0x30c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a5b      	ldr	r2, [pc, #364]	; (80024a0 <HAL_GPIO_Init+0x310>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x314>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02b      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a51      	ldr	r2, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x318>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d025      	beq.n	80023b2 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x31c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_GPIO_Init+0x21a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0x216>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_GPIO_Init+0x328>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00d      	beq.n	80023a2 <HAL_GPIO_Init+0x212>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0x20e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_GPIO_Init+0x330>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_GPIO_Init+0x20a>
 8002396:	2307      	movs	r3, #7
 8002398:	e00e      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239a:	2308      	movs	r3, #8
 800239c:	e00c      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239e:	2306      	movs	r3, #6
 80023a0:	e00a      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x310>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f ae90 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40021400 	.word	0x40021400
 80024bc:	40021800 	.word	0x40021800
 80024c0:	40021c00 	.word	0x40021c00
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fc:	b08f      	sub	sp, #60	; 0x3c
 80024fe:	af0a      	add	r7, sp, #40	; 0x28
 8002500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e054      	b.n	80025b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fb3e 	bl	8001ba8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2203      	movs	r2, #3
 8002530:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f005 fb4b 	bl	8007be6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	687e      	ldr	r6, [r7, #4]
 8002558:	466d      	mov	r5, sp
 800255a:	f106 0410 	add.w	r4, r6, #16
 800255e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800256a:	e885 0003 	stmia.w	r5, {r0, r1}
 800256e:	1d33      	adds	r3, r6, #4
 8002570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	f005 fad6 	bl	8007b24 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f005 fb42 	bl	8007c08 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	687e      	ldr	r6, [r7, #4]
 800258c:	466d      	mov	r5, sp
 800258e:	f106 0410 	add.w	r4, r6, #16
 8002592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800259e:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a2:	1d33      	adds	r3, r6, #4
 80025a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f005 fc8c 	bl	8007ec4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025be <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 fc32 	bl	8007e3e <USB_GetMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 80f6 	bne.w	80027ce <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 fc16 	bl	8007e18 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80ec 	beq.w	80027cc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 fc0d 	bl	8007e18 <USB_ReadInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002608:	d104      	bne.n	8002614 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002612:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f005 fbfd 	bl	8007e18 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002628:	d104      	bne.n	8002634 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002632:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f005 fbed 	bl	8007e18 <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002648:	d104      	bne.n	8002654 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002652:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f005 fbdd 	bl	8007e18 <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d103      	bne.n	8002670 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2202      	movs	r2, #2
 800266e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f005 fbcf 	bl	8007e18 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002684:	d11c      	bne.n	80026c0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800268e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026a0:	2110      	movs	r1, #16
 80026a2:	6938      	ldr	r0, [r7, #16]
 80026a4:	f005 fafc 	bl	8007ca0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026a8:	6938      	ldr	r0, [r7, #16]
 80026aa:	f005 fb2d 	bl	8007d08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f005 fcc5 	bl	8008044 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f89e 	bl	80027fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 fba7 	bl	8007e18 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d102      	bne.n	80026dc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f001 f84c 	bl	8003774 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 fb99 	bl	8007e18 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d106      	bne.n	80026fe <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f86f 	bl	80027d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2208      	movs	r2, #8
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f005 fb88 	bl	8007e18 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d101      	bne.n	8002716 <HAL_HCD_IRQHandler+0x158>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_HCD_IRQHandler+0x15a>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d012      	beq.n	8002742 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0210 	bic.w	r2, r2, #16
 800272a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 ff4f 	bl	80035d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0210 	orr.w	r2, r2, #16
 8002740:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fb66 	bl	8007e18 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002756:	d13a      	bne.n	80027ce <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f005 fcab 	bl	80080b8 <USB_HC_ReadInterrupt>
 8002762:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e025      	b.n	80027b6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d018      	beq.n	80027b0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	d106      	bne.n	80027a4 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f859 	bl	8002854 <HCD_HC_IN_IRQHandler>
 80027a2:	e005      	b.n	80027b0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fba7 	bl	8002efe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3d4      	bcc.n	800276a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	e000      	b.n	80027ce <HAL_HCD_IRQHandler+0x210>
      return;
 80027cc:	bf00      	nop
    }
  }
}
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
 8002844:	4613      	mov	r3, r2
 8002846:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11a      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2304      	movs	r3, #4
 8002894:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3361      	adds	r3, #97	; 0x61
 80028a4:	2206      	movs	r2, #6
 80028a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fc11 	bl	80080da <USB_HC_Halt>
 80028b8:	e0af      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d11b      	bne.n	800290a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3361      	adds	r3, #97	; 0x61
 80028f4:	2207      	movs	r2, #7
 80028f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fbe9 	bl	80080da <USB_HC_Halt>
 8002908:	e087      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d109      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2320      	movs	r3, #32
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	e072      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11a      	bne.n	8002980 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	2308      	movs	r3, #8
 800295a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3361      	adds	r3, #97	; 0x61
 800296a:	2205      	movs	r2, #5
 800296c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fbae 	bl	80080da <USB_HC_Halt>
 800297e:	e04c      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	d11b      	bne.n	80029d0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f005 fb86 	bl	80080da <USB_HC_Halt>
 80029ce:	e024      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b80      	cmp	r3, #128	; 0x80
 80029e4:	d119      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	461a      	mov	r2, r3
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3361      	adds	r3, #97	; 0x61
 8002a06:	2206      	movs	r2, #6
 8002a08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 fb60 	bl	80080da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d112      	bne.n	8002a58 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 fb4c 	bl	80080da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a54:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a56:	e24e      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 80df 	bne.w	8002c2e <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3348      	adds	r3, #72	; 0x48
 8002a86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	0159      	lsls	r1, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	440b      	add	r3, r1
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	202c      	movs	r0, #44	; 0x2c
 8002aa2:	fb00 f303 	mul.w	r3, r0, r3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3350      	adds	r3, #80	; 0x50
 8002aaa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	333f      	adds	r3, #63	; 0x3f
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	333f      	adds	r3, #63	; 0x3f
 8002b04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d111      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 fae0 	bl	80080da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	461a      	mov	r2, r3
 8002b28:	2310      	movs	r3, #16
 8002b2a:	6093      	str	r3, [r2, #8]
 8002b2c:	e03a      	b.n	8002ba4 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	333f      	adds	r3, #63	; 0x3f
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d009      	beq.n	8002b56 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	333f      	adds	r3, #63	; 0x3f
 8002b50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d126      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	0151      	lsls	r1, r2, #5
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	440a      	add	r2, r1
 8002b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b74:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3360      	adds	r3, #96	; 0x60
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	b2d9      	uxtb	r1, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	202c      	movs	r0, #44	; 0x2c
 8002b92:	fb00 f303 	mul.w	r3, r0, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3360      	adds	r3, #96	; 0x60
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fe4a 	bl	8002838 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d12b      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3348      	adds	r3, #72	; 0x48
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	202c      	movs	r0, #44	; 0x2c
 8002bc2:	fb00 f202 	mul.w	r2, r0, r2
 8002bc6:	440a      	add	r2, r1
 8002bc8:	3240      	adds	r2, #64	; 0x40
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 818e 	beq.w	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3354      	adds	r3, #84	; 0x54
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3354      	adds	r3, #84	; 0x54
 8002bfe:	4602      	mov	r2, r0
 8002c00:	701a      	strb	r2, [r3, #0]
}
 8002c02:	e178      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3354      	adds	r3, #84	; 0x54
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2d8      	uxtb	r0, r3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3354      	adds	r3, #84	; 0x54
 8002c28:	4602      	mov	r2, r0
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	e163      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	f040 80f6 	bne.w	8002e32 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3361      	adds	r3, #97	; 0x61
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d109      	bne.n	8002c6e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e0c9      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d109      	bne.n	8002c96 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	2205      	movs	r2, #5
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e0b5      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d009      	beq.n	8002cbe <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3361      	adds	r3, #97	; 0x61
 8002cb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d150      	bne.n	8002d60 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	202c      	movs	r0, #44	; 0x2c
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	440b      	add	r3, r1
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d912      	bls.n	8002d1a <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	335c      	adds	r3, #92	; 0x5c
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3360      	adds	r3, #96	; 0x60
 8002d14:	2204      	movs	r2, #4
 8002d16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d18:	e073      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d42:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d5e:	e050      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d122      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e023      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3361      	adds	r3, #97	; 0x61
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d119      	bne.n	8002e02 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	202c      	movs	r0, #44	; 0x2c
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	440b      	add	r3, r1
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	2204      	movs	r2, #4
 8002e00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2302      	movs	r3, #2
 8002e12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	b2d9      	uxtb	r1, r3
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	202c      	movs	r0, #44	; 0x2c
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fd04 	bl	8002838 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e30:	e061      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d156      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	333f      	adds	r3, #63	; 0x3f
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d111      	bne.n	8002e80 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 f92e 	bl	80080da <USB_HC_Halt>
 8002e7e:	e031      	b.n	8002ee4 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	333f      	adds	r3, #63	; 0x3f
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	333f      	adds	r3, #63	; 0x3f
 8002ea2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11d      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	335c      	adds	r3, #92	; 0x5c
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d110      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3361      	adds	r3, #97	; 0x61
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f005 f8fb 	bl	80080da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	6093      	str	r3, [r2, #8]
}
 8002ef6:	bf00      	nop
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d11a      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	; 0x61
 8002f4e:	2206      	movs	r2, #6
 8002f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f005 f8bc 	bl	80080da <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f62:	e331      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d12e      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2320      	movs	r3, #32
 8002f8a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	333d      	adds	r3, #61	; 0x3d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 8313 	bne.w	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	333d      	adds	r3, #61	; 0x3d
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3360      	adds	r3, #96	; 0x60
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 f882 	bl	80080da <USB_HC_Halt>
}
 8002fd6:	e2f7      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d112      	bne.n	8003016 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003002:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f005 f863 	bl	80080da <USB_HC_Halt>
}
 8003014:	e2d8      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d140      	bne.n	80030ae <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	335c      	adds	r3, #92	; 0x5c
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d111      	bne.n	8003078 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	333d      	adds	r3, #61	; 0x3d
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2340      	movs	r3, #64	; 0x40
 8003076:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2301      	movs	r3, #1
 8003088:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f005 f817 	bl	80080da <USB_HC_Halt>
}
 80030ac:	e28c      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d12c      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333d      	adds	r3, #61	; 0x3d
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	335c      	adds	r3, #92	; 0x5c
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f004 ffe8 	bl	80080da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	461a      	mov	r2, r3
 8003118:	2340      	movs	r3, #64	; 0x40
 800311a:	6093      	str	r3, [r2, #8]
}
 800311c:	e254      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d11a      	bne.n	800316a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	461a      	mov	r2, r3
 8003142:	2308      	movs	r3, #8
 8003144:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3361      	adds	r3, #97	; 0x61
 8003154:	2205      	movs	r2, #5
 8003156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f004 ffb9 	bl	80080da <USB_HC_Halt>
}
 8003168:	e22e      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d140      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	335c      	adds	r3, #92	; 0x5c
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3361      	adds	r3, #97	; 0x61
 80031a0:	2203      	movs	r2, #3
 80031a2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	333d      	adds	r3, #61	; 0x3d
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d112      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	333c      	adds	r3, #60	; 0x3c
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333d      	adds	r3, #61	; 0x3d
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 ff76 	bl	80080da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	461a      	mov	r2, r3
 80031fc:	2310      	movs	r3, #16
 80031fe:	6093      	str	r3, [r2, #8]
}
 8003200:	e1e2      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d164      	bne.n	80032e2 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3361      	adds	r3, #97	; 0x61
 800322e:	2206      	movs	r2, #6
 8003230:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f004 ff4c 	bl	80080da <USB_HC_Halt>
 8003242:	e044      	b.n	80032ce <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	335c      	adds	r3, #92	; 0x5c
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	202c      	movs	r0, #44	; 0x2c
 800325c:	fb00 f303 	mul.w	r3, r0, r3
 8003260:	440b      	add	r3, r1
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	335c      	adds	r3, #92	; 0x5c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d920      	bls.n	80032bc <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	335c      	adds	r3, #92	; 0x5c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	3360      	adds	r3, #96	; 0x60
 800329a:	2204      	movs	r2, #4
 800329c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	b2d9      	uxtb	r1, r3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	202c      	movs	r0, #44	; 0x2c
 80032a8:	fb00 f303 	mul.w	r3, r0, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3360      	adds	r3, #96	; 0x60
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fabf 	bl	8002838 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032ba:	e008      	b.n	80032ce <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3360      	adds	r3, #96	; 0x60
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	6093      	str	r3, [r2, #8]
}
 80032e0:	e172      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d11b      	bne.n	8003332 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3361      	adds	r3, #97	; 0x61
 8003308:	2208      	movs	r2, #8
 800330a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f004 fedf 	bl	80080da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332e:	6093      	str	r3, [r2, #8]
}
 8003330:	e14a      	b.n	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 813f 	bne.w	80035c8 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3361      	adds	r3, #97	; 0x61
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d17d      	bne.n	800345a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3360      	adds	r3, #96	; 0x60
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	333f      	adds	r3, #63	; 0x3f
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d00a      	beq.n	800339a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	333f      	adds	r3, #63	; 0x3f
 8003392:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003394:	2b03      	cmp	r3, #3
 8003396:	f040 8100 	bne.w	800359a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3355      	adds	r3, #85	; 0x55
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3355      	adds	r3, #85	; 0x55
 80033c6:	4602      	mov	r2, r0
 80033c8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80e3 	bne.w	800359a <HCD_HC_OUT_IRQHandler+0x69c>
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	334c      	adds	r3, #76	; 0x4c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80d8 	beq.w	800359a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	334c      	adds	r3, #76	; 0x4c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	202c      	movs	r0, #44	; 0x2c
 8003400:	fb00 f202 	mul.w	r2, r0, r2
 8003404:	440a      	add	r2, r1
 8003406:	3240      	adds	r2, #64	; 0x40
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	4413      	add	r3, r2
 800340c:	3b01      	subs	r3, #1
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	202c      	movs	r0, #44	; 0x2c
 8003414:	fb00 f202 	mul.w	r2, r0, r2
 8003418:	440a      	add	r2, r1
 800341a:	3240      	adds	r2, #64	; 0x40
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80b5 	beq.w	800359a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3355      	adds	r3, #85	; 0x55
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f083 0301 	eor.w	r3, r3, #1
 8003444:	b2d8      	uxtb	r0, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3355      	adds	r3, #85	; 0x55
 8003454:	4602      	mov	r2, r0
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e09f      	b.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	3361      	adds	r3, #97	; 0x61
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d109      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	2202      	movs	r2, #2
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e08b      	b.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3361      	adds	r3, #97	; 0x61
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d109      	bne.n	80034aa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3360      	adds	r3, #96	; 0x60
 80034a4:	2202      	movs	r2, #2
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e077      	b.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3361      	adds	r3, #97	; 0x61
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d109      	bne.n	80034d2 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	2205      	movs	r2, #5
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e063      	b.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	3361      	adds	r3, #97	; 0x61
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d009      	beq.n	80034fa <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3361      	adds	r3, #97	; 0x61
 80034f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d14f      	bne.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	335c      	adds	r3, #92	; 0x5c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	202c      	movs	r0, #44	; 0x2c
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	440b      	add	r3, r1
 8003518:	335c      	adds	r3, #92	; 0x5c
 800351a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	335c      	adds	r3, #92	; 0x5c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d912      	bls.n	8003556 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	335c      	adds	r3, #92	; 0x5c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3360      	adds	r3, #96	; 0x60
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e021      	b.n	800359a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3360      	adds	r3, #96	; 0x60
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800357e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003586:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a6:	461a      	mov	r2, r3
 80035a8:	2302      	movs	r3, #2
 80035aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	b2d9      	uxtb	r1, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	202c      	movs	r0, #44	; 0x2c
 80035b6:	fb00 f303 	mul.w	r3, r0, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3360      	adds	r3, #96	; 0x60
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff f938 	bl	8002838 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	0c5b      	lsrs	r3, r3, #17
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003604:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d004      	beq.n	8003616 <HCD_RXQLVL_IRQHandler+0x46>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b05      	cmp	r3, #5
 8003610:	f000 80a9 	beq.w	8003766 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003614:	e0aa      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a6 	beq.w	800376a <HCD_RXQLVL_IRQHandler+0x19a>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3344      	adds	r3, #68	; 0x44
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 809b 	beq.w	800376a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3350      	adds	r3, #80	; 0x50
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	441a      	add	r2, r3
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	440b      	add	r3, r1
 8003654:	334c      	adds	r3, #76	; 0x4c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d87a      	bhi.n	8003752 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3344      	adds	r3, #68	; 0x44
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	b292      	uxth	r2, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f004 fb77 	bl	8007d68 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3344      	adds	r3, #68	; 0x44
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	441a      	add	r2, r3
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	202c      	movs	r0, #44	; 0x2c
 8003694:	fb00 f303 	mul.w	r3, r0, r3
 8003698:	440b      	add	r3, r1
 800369a:	3344      	adds	r3, #68	; 0x44
 800369c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3350      	adds	r3, #80	; 0x50
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	441a      	add	r2, r3
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	202c      	movs	r0, #44	; 0x2c
 80036b8:	fb00 f303 	mul.w	r3, r0, r3
 80036bc:	440b      	add	r3, r1
 80036be:	3350      	adds	r3, #80	; 0x50
 80036c0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	0cdb      	lsrs	r3, r3, #19
 80036d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	3340      	adds	r3, #64	; 0x40
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d13c      	bne.n	800376a <HCD_RXQLVL_IRQHandler+0x19a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d039      	beq.n	800376a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003714:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3354      	adds	r3, #84	; 0x54
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2d8      	uxtb	r0, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	3354      	adds	r3, #84	; 0x54
 800374c:	4602      	mov	r2, r0
 800374e:	701a      	strb	r2, [r3, #0]
      break;
 8003750:	e00b      	b.n	800376a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	3360      	adds	r3, #96	; 0x60
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
      break;
 8003764:	e001      	b.n	800376a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800376a:	bf00      	nop
  }
}
 800376c:	bf00      	nop
 800376e:	3728      	adds	r7, #40	; 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d10b      	bne.n	80037c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff f816 	bl	80027e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d132      	bne.n	8003834 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d126      	bne.n	800382e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d113      	bne.n	8003810 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f2:	d106      	bne.n	8003802 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fc22 	bl	8008044 <USB_InitFSLSPClkSel>
 8003800:	e011      	b.n	8003826 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fc1b 	bl	8008044 <USB_InitFSLSPClkSel>
 800380e:	e00a      	b.n	8003826 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d106      	bne.n	8003826 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381e:	461a      	mov	r2, r3
 8003820:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003824:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe fff2 	bl	8002810 <HAL_HCD_PortEnabled_Callback>
 800382c:	e002      	b.n	8003834 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fff8 	bl	8002824 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d103      	bne.n	8003846 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f043 0320 	orr.w	r3, r3, #32
 8003844:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e12b      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd ffae 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c0:	f003 fb7e 	bl	8006fc0 <HAL_RCC_GetPCLK1Freq>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a81      	ldr	r2, [pc, #516]	; (8003ad0 <HAL_I2C_Init+0x274>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d807      	bhi.n	80038e0 <HAL_I2C_Init+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_I2C_Init+0x278>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e006      	b.n	80038ee <HAL_I2C_Init+0x92>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a7d      	ldr	r2, [pc, #500]	; (8003ad8 <HAL_I2C_Init+0x27c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0e7      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a78      	ldr	r2, [pc, #480]	; (8003adc <HAL_I2C_Init+0x280>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a6a      	ldr	r2, [pc, #424]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <HAL_I2C_Init+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	e009      	b.n	8003944 <HAL_I2C_Init+0xe8>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a69      	ldr	r2, [pc, #420]	; (8003ae0 <HAL_I2C_Init+0x284>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	495c      	ldr	r1, [pc, #368]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d819      	bhi.n	8003998 <HAL_I2C_Init+0x13c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e59      	subs	r1, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003978:	400b      	ands	r3, r1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_I2C_Init+0x138>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e59      	subs	r1, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fbb1 f3f3 	udiv	r3, r1, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	e051      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003994:	2304      	movs	r3, #4
 8003996:	e04f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <HAL_I2C_Init+0x168>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <HAL_I2C_Init+0x18e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	0099      	lsls	r1, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Init+0x196>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e022      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_I2C_Init+0x1bc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1e58      	subs	r0, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	440b      	add	r3, r1
 8003a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6809      	ldr	r1, [r1, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6911      	ldr	r1, [r2, #16]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	000186a0 	.word	0x000186a0
 8003ad4:	001e847f 	.word	0x001e847f
 8003ad8:	003d08ff 	.word	0x003d08ff
 8003adc:	431bde83 	.word	0x431bde83
 8003ae0:	10624dd3 	.word	0x10624dd3

08003ae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	817b      	strh	r3, [r7, #10]
 8003af6:	460b      	mov	r3, r1
 8003af8:	813b      	strh	r3, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003afe:	f7fe f9d5 	bl	8001eac <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	f040 8208 	bne.w	8003f22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2319      	movs	r3, #25
 8003b18:	2201      	movs	r2, #1
 8003b1a:	497b      	ldr	r1, [pc, #492]	; (8003d08 <HAL_I2C_Mem_Read+0x224>)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f001 ff55 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e1fb      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x56>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e1f4      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d007      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2222      	movs	r2, #34	; 0x22
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2240      	movs	r2, #64	; 0x40
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a5b      	ldr	r2, [pc, #364]	; (8003d0c <HAL_I2C_Mem_Read+0x228>)
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba2:	88f8      	ldrh	r0, [r7, #6]
 8003ba4:	893a      	ldrh	r2, [r7, #8]
 8003ba6:	8979      	ldrh	r1, [r7, #10]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 fd7a 	bl	80056ac <I2C_RequestMemoryRead>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1b0      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d113      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e184      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d11b      	bne.n	8003c32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e164      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d11b      	bne.n	8003c72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	e144      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c88:	e138      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	f200 80f1 	bhi.w	8003e76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d123      	bne.n	8003ce4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f001 ffdd 	bl	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e139      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce2:	e10b      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d14e      	bne.n	8003d8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4906      	ldr	r1, [pc, #24]	; (8003d10 <HAL_I2C_Mem_Read+0x22c>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f001 fe68 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e10e      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
 8003d06:	bf00      	nop
 8003d08:	00100002 	.word	0x00100002
 8003d0c:	ffff0000 	.word	0xffff0000
 8003d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d88:	e0b8      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2200      	movs	r2, #0
 8003d92:	4966      	ldr	r1, [pc, #408]	; (8003f2c <HAL_I2C_Mem_Read+0x448>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f001 fe19 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0bf      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	494f      	ldr	r1, [pc, #316]	; (8003f2c <HAL_I2C_Mem_Read+0x448>)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f001 fdeb 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e091      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e74:	e042      	b.n	8003efc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f001 fef0 	bl	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e04c      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d118      	bne.n	8003efc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f aec2 	bne.w	8003c8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3728      	adds	r7, #40	; 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	00010004 	.word	0x00010004

08003f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d003      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x38>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	f040 80b1 	bne.w	80040ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f88:	d003      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x62>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x66>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x68>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f000 8114 	beq.w	80041c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x90>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 fed9 	bl	8005d6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fd5e 	bl	8004a7a <I2C_Master_SB>
 8003fbe:	e083      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0xac>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fdd6 	bl	8004b86 <I2C_Master_ADD10>
 8003fda:	e075      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0xc8>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fdf2 	bl	8004bda <I2C_Master_ADDR>
 8003ff6:	e067      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004010:	f000 80db 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f9d6 	bl	80043e4 <I2C_MasterTransmit_TXE>
 8004038:	e046      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80c2 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80bc 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004052:	7bbb      	ldrb	r3, [r7, #14]
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d103      	bne.n	8004060 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fa5f 	bl	800451c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	e0b4      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	f040 80b1 	bne.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 facd 	bl	8004608 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406e:	e0ac      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	f000 80a4 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb45 	bl	8004730 <I2C_MasterReceive_RXNE>
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8085 	beq.w	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fbf0 	bl	80048a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040c6:	e080      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
 80040c8:	e07f      	b.n	80041ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e007      	b.n	80040ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d011      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x1ea>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 ffb0 	bl	8005078 <I2C_Slave_ADDR>
 8004118:	e05a      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 ffea 	bl	8005108 <I2C_Slave_STOPF>
 8004134:	e04c      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	2b21      	cmp	r3, #33	; 0x21
 800413a:	d002      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x212>
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	2b29      	cmp	r3, #41	; 0x29
 8004140:	d120      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fecb 	bl	8004efc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004166:	e032      	b.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d02d      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d028      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fefa 	bl	8004f76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004182:	e024      	b.n	80041ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 ff08 	bl	8004fb8 <I2C_SlaveReceive_RXNE>
 80041a8:	e012      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ff38 	bl	8005034 <I2C_SlaveReceive_BTF>
 80041c4:	e004      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08a      	sub	sp, #40	; 0x28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <HAL_I2C_ER_IRQHandler+0x4a>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800421e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <HAL_I2C_ER_IRQHandler+0x70>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004244:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03e      	beq.n	80042ce <HAL_I2C_ER_IRQHandler+0xf8>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d039      	beq.n	80042ce <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800425a:	7efb      	ldrb	r3, [r7, #27]
 800425c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004274:	7ebb      	ldrb	r3, [r7, #26]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d112      	bne.n	80042a0 <HAL_I2C_ER_IRQHandler+0xca>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <HAL_I2C_ER_IRQHandler+0xca>
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d008      	beq.n	8004298 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b29      	cmp	r3, #41	; 0x29
 800428a:	d005      	beq.n	8004298 <HAL_I2C_ER_IRQHandler+0xc2>
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d106      	bne.n	80042a0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b21      	cmp	r3, #33	; 0x21
 8004296:	d103      	bne.n	80042a0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f001 f865 	bl	8005368 <I2C_Slave_AF>
 800429e:	e016      	b.n	80042ce <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042b2:	7efb      	ldrb	r3, [r7, #27]
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d002      	beq.n	80042be <HAL_I2C_ER_IRQHandler+0xe8>
 80042b8:	7efb      	ldrb	r3, [r7, #27]
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d107      	bne.n	80042ce <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_I2C_ER_IRQHandler+0x11e>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 f89e 	bl	8005448 <I2C_ITError>
  }
}
 800430c:	bf00      	nop
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d150      	bne.n	80044ac <I2C_MasterTransmit_TXE+0xc8>
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b21      	cmp	r3, #33	; 0x21
 800440e:	d14d      	bne.n	80044ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b08      	cmp	r3, #8
 8004414:	d01d      	beq.n	8004452 <I2C_MasterTransmit_TXE+0x6e>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b20      	cmp	r3, #32
 800441a:	d01a      	beq.n	8004452 <I2C_MasterTransmit_TXE+0x6e>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004422:	d016      	beq.n	8004452 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2211      	movs	r2, #17
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff62 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004450:	e060      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004460:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d107      	bne.n	800449c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff7d 	bl	8004394 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800449a:	e03b      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff35 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044aa:	e033      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b21      	cmp	r3, #33	; 0x21
 80044b0:	d005      	beq.n	80044be <I2C_MasterTransmit_TXE+0xda>
 80044b2:	7bbb      	ldrb	r3, [r7, #14]
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d12d      	bne.n	8004514 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b22      	cmp	r3, #34	; 0x22
 80044bc:	d12a      	bne.n	8004514 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044d8:	e01c      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d103      	bne.n	80044ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f88e 	bl	8004608 <I2C_MemoryTransmit_TXE_BTF>
}
 80044ec:	e012      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004512:	e7ff      	b.n	8004514 <I2C_MasterTransmit_TXE+0x130>
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b21      	cmp	r3, #33	; 0x21
 8004534:	d164      	bne.n	8004600 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004564:	e04c      	b.n	8004600 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d01d      	beq.n	80045a8 <I2C_MasterTransmit_BTF+0x8c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b20      	cmp	r3, #32
 8004570:	d01a      	beq.n	80045a8 <I2C_MasterTransmit_BTF+0x8c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004578:	d016      	beq.n	80045a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004588:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2211      	movs	r2, #17
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff feb7 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
}
 80045a6:	e02b      	b.n	8004600 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d107      	bne.n	80045f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fed2 	bl	8004394 <HAL_I2C_MemTxCpltCallback>
}
 80045f0:	e006      	b.n	8004600 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fe8a 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11d      	bne.n	800465c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10b      	bne.n	8004640 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800463e:	e073      	b.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004644:	b29b      	uxth	r3, r3
 8004646:	121b      	asrs	r3, r3, #8
 8004648:	b2da      	uxtb	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	651a      	str	r2, [r3, #80]	; 0x50
}
 800465a:	e065      	b.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10b      	bne.n	800467c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	b2da      	uxtb	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	651a      	str	r2, [r3, #80]	; 0x50
}
 800467a:	e055      	b.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	2b02      	cmp	r3, #2
 8004682:	d151      	bne.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b22      	cmp	r3, #34	; 0x22
 8004688:	d10d      	bne.n	80046a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004698:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046a4:	e040      	b.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b21      	cmp	r3, #33	; 0x21
 80046b4:	d112      	bne.n	80046dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046da:	e025      	b.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d120      	bne.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b21      	cmp	r3, #33	; 0x21
 80046ea:	d11d      	bne.n	8004728 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fe36 	bl	8004394 <HAL_I2C_MemTxCpltCallback>
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b22      	cmp	r3, #34	; 0x22
 8004742:	f040 80ac 	bne.w	800489e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d921      	bls.n	8004798 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b03      	cmp	r3, #3
 8004782:	f040 808c 	bne.w	800489e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004794:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004796:	e082      	b.n	800489e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	2b02      	cmp	r3, #2
 800479e:	d075      	beq.n	800488c <I2C_MasterReceive_RXNE+0x15c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d002      	beq.n	80047ac <I2C_MasterReceive_RXNE+0x7c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d16f      	bne.n	800488c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 fa25 	bl	8005bfc <I2C_WaitOnSTOPRequestThroughIT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d142      	bne.n	800483e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d10a      	bne.n	8004828 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fdc1 	bl	80043a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004826:	e03a      	b.n	800489e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2212      	movs	r2, #18
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fd76 	bl	8004328 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800483c:	e02f      	b.n	800489e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fd99 	bl	80043bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800488a:	e008      	b.n	800489e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	605a      	str	r2, [r3, #4]
}
 800489c:	e7ff      	b.n	800489e <I2C_MasterReceive_RXNE+0x16e>
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d11b      	bne.n	80048f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80048f4:	e0bd      	b.n	8004a72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d129      	bne.n	8004954 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00a      	beq.n	800492c <I2C_MasterReceive_BTF+0x86>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d007      	beq.n	800492c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004952:	e08e      	b.n	8004a72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d176      	bne.n	8004a4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <I2C_MasterReceive_BTF+0xc4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b10      	cmp	r3, #16
 8004968:	d108      	bne.n	800497c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e019      	b.n	80049b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d002      	beq.n	8004988 <I2C_MasterReceive_BTF+0xe2>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d108      	bne.n	800499a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e00a      	b.n	80049b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d007      	beq.n	80049b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d10a      	bne.n	8004a36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fcba 	bl	80043a8 <HAL_I2C_MemRxCpltCallback>
}
 8004a34:	e01d      	b.n	8004a72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2212      	movs	r2, #18
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fc6f 	bl	8004328 <HAL_I2C_MasterRxCpltCallback>
}
 8004a4a:	e012      	b.n	8004a72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d117      	bne.n	8004abe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004aa8:	e067      	b.n	8004b7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]
}
 8004abc:	e05d      	b.n	8004b7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac6:	d133      	bne.n	8004b30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b21      	cmp	r3, #33	; 0x21
 8004ad2:	d109      	bne.n	8004ae8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae4:	611a      	str	r2, [r3, #16]
 8004ae6:	e008      	b.n	8004afa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <I2C_Master_SB+0x92>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d032      	beq.n	8004b7a <I2C_Master_SB+0x100>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02d      	beq.n	8004b7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2c:	605a      	str	r2, [r3, #4]
}
 8004b2e:	e024      	b.n	8004b7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10e      	bne.n	8004b56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	11db      	asrs	r3, r3, #7
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f003 0306 	and.w	r3, r3, #6
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f063 030f 	orn	r3, r3, #15
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]
}
 8004b54:	e011      	b.n	8004b7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10d      	bne.n	8004b7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	11db      	asrs	r3, r3, #7
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 0306 	and.w	r3, r3, #6
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f063 030e 	orn	r3, r3, #14
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <I2C_Master_ADD10+0x26>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00c      	beq.n	8004bce <I2C_Master_ADD10+0x48>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bcc:	605a      	str	r2, [r3, #4]
  }
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b091      	sub	sp, #68	; 0x44
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b22      	cmp	r3, #34	; 0x22
 8004c02:	f040 8169 	bne.w	8004ed8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <I2C_Master_ADDR+0x54>
 8004c0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d10b      	bne.n	8004c2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	e160      	b.n	8004ef0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11d      	bne.n	8004c72 <I2C_Master_ADDR+0x98>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c3e:	d118      	bne.n	8004c72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c40:	2300      	movs	r3, #0
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c70:	e13e      	b.n	8004ef0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d113      	bne.n	8004ca4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e115      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	f040 808a 	bne.w	8004dc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cb6:	d137      	bne.n	8004d28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd6:	d113      	bne.n	8004d00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	e0e7      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d00:	2300      	movs	r3, #0
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e0d3      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d02e      	beq.n	8004d8c <I2C_Master_ADDR+0x1b2>
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d02b      	beq.n	8004d8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	2b12      	cmp	r3, #18
 8004d38:	d102      	bne.n	8004d40 <I2C_Master_ADDR+0x166>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d125      	bne.n	8004d8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d00e      	beq.n	8004d64 <I2C_Master_ADDR+0x18a>
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d00b      	beq.n	8004d64 <I2C_Master_ADDR+0x18a>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d008      	beq.n	8004d64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e007      	b.n	8004d74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	e0a1      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e085      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d14d      	bne.n	8004e6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d016      	beq.n	8004e02 <I2C_Master_ADDR+0x228>
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d013      	beq.n	8004e02 <I2C_Master_ADDR+0x228>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d010      	beq.n	8004e02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e007      	b.n	8004e12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d117      	bne.n	8004e52 <I2C_Master_ADDR+0x278>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e28:	d00b      	beq.n	8004e42 <I2C_Master_ADDR+0x268>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d008      	beq.n	8004e42 <I2C_Master_ADDR+0x268>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d005      	beq.n	8004e42 <I2C_Master_ADDR+0x268>
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d002      	beq.n	8004e42 <I2C_Master_ADDR+0x268>
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d107      	bne.n	8004e52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	e032      	b.n	8004ed0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e88:	d117      	bne.n	8004eba <I2C_Master_ADDR+0x2e0>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e90:	d00b      	beq.n	8004eaa <I2C_Master_ADDR+0x2d0>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d008      	beq.n	8004eaa <I2C_Master_ADDR+0x2d0>
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d005      	beq.n	8004eaa <I2C_Master_ADDR+0x2d0>
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d002      	beq.n	8004eaa <I2C_Master_ADDR+0x2d0>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d107      	bne.n	8004eba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ed6:	e00b      	b.n	8004ef0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	e7ff      	b.n	8004ef0 <I2C_Master_ADDR+0x316>
 8004ef0:	bf00      	nop
 8004ef2:	3744      	adds	r7, #68	; 0x44
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02b      	beq.n	8004f6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d114      	bne.n	8004f6e <I2C_SlaveTransmit_TXE+0x72>
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b29      	cmp	r3, #41	; 0x29
 8004f48:	d111      	bne.n	8004f6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2221      	movs	r2, #33	; 0x21
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2228      	movs	r2, #40	; 0x28
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff f9e7 	bl	800433c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02c      	beq.n	800502c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d114      	bne.n	800502c <I2C_SlaveReceive_RXNE+0x74>
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b2a      	cmp	r3, #42	; 0x2a
 8005006:	d111      	bne.n	800502c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2222      	movs	r2, #34	; 0x22
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2228      	movs	r2, #40	; 0x28
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff f992 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d012      	beq.n	800506c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005092:	2b28      	cmp	r3, #40	; 0x28
 8005094:	d125      	bne.n	80050e2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	81bb      	strh	r3, [r7, #12]
 80050c4:	e002      	b.n	80050cc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80050d4:	89ba      	ldrh	r2, [r7, #12]
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff f942 	bl	8004364 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050e0:	e00e      	b.n	8005100 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005126:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005164:	d172      	bne.n	800524c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b22      	cmp	r3, #34	; 0x22
 800516a:	d002      	beq.n	8005172 <I2C_Slave_STOPF+0x6a>
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b2a      	cmp	r3, #42	; 0x2a
 8005170:	d135      	bne.n	80051de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 0204 	orr.w	r2, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc ffe1 	bl	8002172 <HAL_DMA_GetState>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d049      	beq.n	800524a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	4a69      	ldr	r2, [pc, #420]	; (8005360 <I2C_Slave_STOPF+0x258>)
 80051bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fc ffb3 	bl	800212e <HAL_DMA_Abort_IT>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03d      	beq.n	800524a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051dc:	e035      	b.n	800524a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005210:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc ffab 	bl	8002172 <HAL_DMA_GetState>
 800521c:	4603      	mov	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d014      	beq.n	800524c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <I2C_Slave_STOPF+0x258>)
 8005228:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	4618      	mov	r0, r3
 8005230:	f7fc ff7d 	bl	800212e <HAL_DMA_Abort_IT>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005244:	4610      	mov	r0, r2
 8005246:	4798      	blx	r3
 8005248:	e000      	b.n	800524c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800524a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d03e      	beq.n	80052d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b04      	cmp	r3, #4
 8005262:	d112      	bne.n	800528a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d112      	bne.n	80052be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f043 0204 	orr.w	r2, r3, #4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8b3 	bl	8005448 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80052e2:	e039      	b.n	8005358 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b2a      	cmp	r3, #42	; 0x2a
 80052e8:	d109      	bne.n	80052fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2228      	movs	r2, #40	; 0x28
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff f829 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b28      	cmp	r3, #40	; 0x28
 8005308:	d111      	bne.n	800532e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a15      	ldr	r2, [pc, #84]	; (8005364 <I2C_Slave_STOPF+0x25c>)
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff f82a 	bl	8004380 <HAL_I2C_ListenCpltCallback>
}
 800532c:	e014      	b.n	8005358 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	2b22      	cmp	r3, #34	; 0x22
 8005334:	d002      	beq.n	800533c <I2C_Slave_STOPF+0x234>
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b22      	cmp	r3, #34	; 0x22
 800533a:	d10d      	bne.n	8005358 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fe fffc 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	0800587d 	.word	0x0800587d
 8005364:	ffff0000 	.word	0xffff0000

08005368 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d002      	beq.n	800538a <I2C_Slave_AF+0x22>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b20      	cmp	r3, #32
 8005388:	d129      	bne.n	80053de <I2C_Slave_AF+0x76>
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b28      	cmp	r3, #40	; 0x28
 800538e:	d126      	bne.n	80053de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <I2C_Slave_AF+0xdc>)
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fe ffd2 	bl	8004380 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80053dc:	e02e      	b.n	800543c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b21      	cmp	r3, #33	; 0x21
 80053e2:	d126      	bne.n	8005432 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <I2C_Slave_AF+0xdc>)
 80053e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2221      	movs	r2, #33	; 0x21
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800540e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005418:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fe ff86 	bl	800433c <HAL_I2C_SlaveTxCpltCallback>
}
 8005430:	e004      	b.n	800543c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543a:	615a      	str	r2, [r3, #20]
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	ffff0000 	.word	0xffff0000

08005448 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	2b10      	cmp	r3, #16
 8005464:	d002      	beq.n	800546c <I2C_ITError+0x24>
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d10a      	bne.n	8005482 <I2C_ITError+0x3a>
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b22      	cmp	r3, #34	; 0x22
 8005470:	d107      	bne.n	8005482 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005480:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005488:	2b28      	cmp	r3, #40	; 0x28
 800548a:	d107      	bne.n	800549c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2228      	movs	r2, #40	; 0x28
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800549a:	e015      	b.n	80054c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054aa:	d00a      	beq.n	80054c2 <I2C_ITError+0x7a>
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b60      	cmp	r3, #96	; 0x60
 80054b0:	d007      	beq.n	80054c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d162      	bne.n	800559e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d020      	beq.n	8005538 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	4a6a      	ldr	r2, [pc, #424]	; (80056a4 <I2C_ITError+0x25c>)
 80054fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	4618      	mov	r0, r3
 8005504:	f7fc fe13 	bl	800212e <HAL_DMA_Abort_IT>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8089 	beq.w	8005622 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005532:	4610      	mov	r0, r2
 8005534:	4798      	blx	r3
 8005536:	e074      	b.n	8005622 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <I2C_ITError+0x25c>)
 800553e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	4618      	mov	r0, r3
 8005546:	f7fc fdf2 	bl	800212e <HAL_DMA_Abort_IT>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d068      	beq.n	8005622 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d10b      	bne.n	8005576 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
 800559c:	e041      	b.n	8005622 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b60      	cmp	r3, #96	; 0x60
 80055a8:	d125      	bne.n	80055f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d10b      	bne.n	80055de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fe feee 	bl	80043d0 <HAL_I2C_AbortCpltCallback>
 80055f4:	e015      	b.n	8005622 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d10b      	bne.n	800561c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fe fecd 	bl	80043bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10e      	bne.n	8005650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b04      	cmp	r3, #4
 8005672:	d113      	bne.n	800569c <I2C_ITError+0x254>
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b28      	cmp	r3, #40	; 0x28
 8005678:	d110      	bne.n	800569c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <I2C_ITError+0x260>)
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fe fe72 	bl	8004380 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	0800587d 	.word	0x0800587d
 80056a8:	ffff0000 	.word	0xffff0000

080056ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	817b      	strh	r3, [r7, #10]
 80056be:	460b      	mov	r3, r1
 80056c0:	813b      	strh	r3, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f96a 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570c:	d103      	bne.n	8005716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0aa      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800571a:	897b      	ldrh	r3, [r7, #10]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	4952      	ldr	r1, [pc, #328]	; (8005878 <I2C_RequestMemoryRead+0x1cc>)
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f9a2 	bl	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e097      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005758:	6a39      	ldr	r1, [r7, #32]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fa0c 	bl	8005b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b04      	cmp	r3, #4
 800576c:	d107      	bne.n	800577e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e076      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	611a      	str	r2, [r3, #16]
 8005792:	e021      	b.n	80057d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	b29b      	uxth	r3, r3
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	6a39      	ldr	r1, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f9e6 	bl	8005b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e050      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ce:	893b      	ldrh	r3, [r7, #8]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	6a39      	ldr	r1, [r7, #32]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f9cb 	bl	8005b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00d      	beq.n	8005804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d107      	bne.n	8005800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e035      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2200      	movs	r2, #0
 800581c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f8d3 	bl	80059cc <I2C_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583a:	d103      	bne.n	8005844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e013      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005848:	897b      	ldrh	r3, [r7, #10]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	4906      	ldr	r1, [pc, #24]	; (8005878 <I2C_RequestMemoryRead+0x1cc>)
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f90b 	bl	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	00010002 	.word	0x00010002

0800587c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005896:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <I2C_DMAAbort+0x148>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	08db      	lsrs	r3, r3, #3
 800589c:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <I2C_DMAAbort+0x14c>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	0a1a      	lsrs	r2, r3, #8
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	00da      	lsls	r2, r3, #3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80058c2:	e00a      	b.n	80058da <I2C_DMAAbort+0x5e>
    }
    count--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d8:	d0ea      	beq.n	80058b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	2200      	movs	r2, #0
 80058e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	2200      	movs	r2, #0
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	2200      	movs	r2, #0
 800591e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	2200      	movs	r2, #0
 800592e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b60      	cmp	r3, #96	; 0x60
 800594a:	d10e      	bne.n	800596a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7fe fd34 	bl	80043d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005968:	e027      	b.n	80059ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800596a:	7cfb      	ldrb	r3, [r7, #19]
 800596c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005970:	2b28      	cmp	r3, #40	; 0x28
 8005972:	d117      	bne.n	80059a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005992:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2228      	movs	r2, #40	; 0x28
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059a2:	e007      	b.n	80059b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f7fe fd01 	bl	80043bc <HAL_I2C_ErrorCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000000 	.word	0x20000000
 80059c8:	14f8b589 	.word	0x14f8b589

080059cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059dc:	e025      	b.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e4:	d021      	beq.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fc fa61 	bl	8001eac <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d116      	bne.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e023      	b.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10d      	bne.n	8005a50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	e00c      	b.n	8005a6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d0b6      	beq.n	80059de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a88:	e051      	b.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d123      	bne.n	8005ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0204 	orr.w	r2, r3, #4
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e046      	b.n	8005b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae8:	d021      	beq.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fc f9df 	bl	8001eac <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d116      	bne.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e020      	b.n	8005b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d10c      	bne.n	8005b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf14      	ite	ne
 8005b4a:	2301      	movne	r3, #1
 8005b4c:	2300      	moveq	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	e00b      	b.n	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d18d      	bne.n	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b84:	e02d      	b.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f8c0 	bl	8005d0c <I2C_IsAcknowledgeFailed>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e02d      	b.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d021      	beq.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fc f985 	bl	8001eac <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e007      	b.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d1ca      	bne.n	8005b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	08db      	lsrs	r3, r3, #3
 8005c0e:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	0a1a      	lsrs	r2, r3, #8
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e008      	b.n	8005c4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d0e9      	beq.n	8005c1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000000 	.word	0x20000000
 8005c5c:	14f8b589 	.word	0x14f8b589

08005c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c6c:	e042      	b.n	8005cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d119      	bne.n	8005cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e029      	b.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb0:	f7fc f8fc 	bl	8001eac <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d302      	bcc.n	8005cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d116      	bne.n	8005cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e007      	b.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d1b5      	bne.n	8005c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d11b      	bne.n	8005d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005d7a:	d103      	bne.n	8005d84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d82:	e007      	b.n	8005d94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d8c:	d102      	bne.n	8005d94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2208      	movs	r2, #8
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e128      	b.n	8006004 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a90      	ldr	r2, [pc, #576]	; (800600c <HAL_I2S_Init+0x26c>)
 8005dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fd83 	bl	80018d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005de8:	f023 030f 	bic.w	r3, r3, #15
 8005dec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2202      	movs	r2, #2
 8005df4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d060      	beq.n	8005ec0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005e06:	2310      	movs	r3, #16
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e001      	b.n	8005e10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d802      	bhi.n	8005e1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f001 f9d8 	bl	80071d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e24:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d125      	bne.n	8005e7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d010      	beq.n	8005e5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	3305      	adds	r3, #5
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	e01f      	b.n	8005e9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	3305      	adds	r3, #5
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e00e      	b.n	8005e9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	3305      	adds	r3, #5
 8005e98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4a5c      	ldr	r2, [pc, #368]	; (8006010 <HAL_I2S_Init+0x270>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	e003      	b.n	8005ec8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d902      	bls.n	8005ed4 <HAL_I2S_Init+0x134>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2bff      	cmp	r3, #255	; 0xff
 8005ed2:	d907      	bls.n	8005ee4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0210 	orr.w	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e08f      	b.n	8006004 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	ea42 0103 	orr.w	r1, r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f02:	f023 030f 	bic.w	r3, r3, #15
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6851      	ldr	r1, [r2, #4]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6892      	ldr	r2, [r2, #8]
 8005f0e:	4311      	orrs	r1, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68d2      	ldr	r2, [r2, #12]
 8005f14:	4311      	orrs	r1, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6992      	ldr	r2, [r2, #24]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d161      	bne.n	8005ff4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a38      	ldr	r2, [pc, #224]	; (8006014 <HAL_I2S_Init+0x274>)
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a37      	ldr	r2, [pc, #220]	; (8006018 <HAL_I2S_Init+0x278>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_I2S_Init+0x1a4>
 8005f40:	4b36      	ldr	r3, [pc, #216]	; (800601c <HAL_I2S_Init+0x27c>)
 8005f42:	e001      	b.n	8005f48 <HAL_I2S_Init+0x1a8>
 8005f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	4932      	ldr	r1, [pc, #200]	; (8006018 <HAL_I2S_Init+0x278>)
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d101      	bne.n	8005f58 <HAL_I2S_Init+0x1b8>
 8005f54:	4a31      	ldr	r2, [pc, #196]	; (800601c <HAL_I2S_Init+0x27c>)
 8005f56:	e001      	b.n	8005f5c <HAL_I2S_Init+0x1bc>
 8005f58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005f5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f60:	f023 030f 	bic.w	r3, r3, #15
 8005f64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2b      	ldr	r2, [pc, #172]	; (8006018 <HAL_I2S_Init+0x278>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_I2S_Init+0x1d4>
 8005f70:	4b2a      	ldr	r3, [pc, #168]	; (800601c <HAL_I2S_Init+0x27c>)
 8005f72:	e001      	b.n	8005f78 <HAL_I2S_Init+0x1d8>
 8005f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f78:	2202      	movs	r2, #2
 8005f7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a25      	ldr	r2, [pc, #148]	; (8006018 <HAL_I2S_Init+0x278>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_I2S_Init+0x1ea>
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <HAL_I2S_Init+0x27c>)
 8005f88:	e001      	b.n	8005f8e <HAL_I2S_Init+0x1ee>
 8005f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9a:	d003      	beq.n	8005fa4 <HAL_I2S_Init+0x204>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	e001      	b.n	8005fb0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fdc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0d      	ldr	r2, [pc, #52]	; (8006018 <HAL_I2S_Init+0x278>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d101      	bne.n	8005fec <HAL_I2S_Init+0x24c>
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <HAL_I2S_Init+0x27c>)
 8005fea:	e001      	b.n	8005ff0 <HAL_I2S_Init+0x250>
 8005fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff0:	897a      	ldrh	r2, [r7, #10]
 8005ff2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	08006117 	.word	0x08006117
 8006010:	cccccccd 	.word	0xcccccccd
 8006014:	0800622d 	.word	0x0800622d
 8006018:	40003800 	.word	0x40003800
 800601c:	40003400 	.word	0x40003400

08006020 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	881a      	ldrh	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10e      	bne.n	80060b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff ffb8 	bl	8006020 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	b292      	uxth	r2, r2
 80060cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10e      	bne.n	800610e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff93 	bl	8006034 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b04      	cmp	r3, #4
 8006130:	d13a      	bne.n	80061a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b01      	cmp	r3, #1
 800613a:	d109      	bne.n	8006150 <I2S_IRQHandler+0x3a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d102      	bne.n	8006150 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ffb4 	bl	80060b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d126      	bne.n	80061a8 <I2S_IRQHandler+0x92>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d11f      	bne.n	80061a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006176:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	f043 0202 	orr.w	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff ff50 	bl	8006048 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d136      	bne.n	8006222 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d109      	bne.n	80061d2 <I2S_IRQHandler+0xbc>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d102      	bne.n	80061d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff45 	bl	800605c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d122      	bne.n	8006222 <I2S_IRQHandler+0x10c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d11b      	bne.n	8006222 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff13 	bl	8006048 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a92      	ldr	r2, [pc, #584]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006246:	4b92      	ldr	r3, [pc, #584]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006248:	e001      	b.n	800624e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800624a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a8b      	ldr	r2, [pc, #556]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006264:	4b8a      	ldr	r3, [pc, #552]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006266:	e001      	b.n	800626c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006278:	d004      	beq.n	8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 8099 	bne.w	80063b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d107      	bne.n	800629e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f925 	bl	80064e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9c8 	bl	8006648 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d13a      	bne.n	8006338 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d035      	beq.n	8006338 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a6e      	ldr	r2, [pc, #440]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80062d6:	4b6e      	ldr	r3, [pc, #440]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062d8:	e001      	b.n	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80062da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4969      	ldr	r1, [pc, #420]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062e6:	428b      	cmp	r3, r1
 80062e8:	d101      	bne.n	80062ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80062ea:	4b69      	ldr	r3, [pc, #420]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062ec:	e001      	b.n	80062f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80062ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006306:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f043 0202 	orr.w	r2, r3, #2
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fe88 	bl	8006048 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b08      	cmp	r3, #8
 8006340:	f040 80c3 	bne.w	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80bd 	beq.w	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800635e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a49      	ldr	r2, [pc, #292]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800636a:	4b49      	ldr	r3, [pc, #292]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800636c:	e001      	b.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800636e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4944      	ldr	r1, [pc, #272]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800637a:	428b      	cmp	r3, r1
 800637c:	d101      	bne.n	8006382 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800637e:	4b44      	ldr	r3, [pc, #272]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006380:	e001      	b.n	8006386 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800638a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800638c:	2300      	movs	r3, #0
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	f043 0204 	orr.w	r2, r3, #4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fe4a 	bl	8006048 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063b4:	e089      	b.n	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d107      	bne.n	80063d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8be 	bl	800654c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d107      	bne.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8fd 	bl	80065e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d12f      	bne.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d02a      	beq.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800640c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1e      	ldr	r2, [pc, #120]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800641a:	e001      	b.n	8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800641c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4919      	ldr	r1, [pc, #100]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006428:	428b      	cmp	r3, r1
 800642a:	d101      	bne.n	8006430 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800642c:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800642e:	e001      	b.n	8006434 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006438:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	f043 0202 	orr.w	r2, r3, #2
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fdfa 	bl	8006048 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b08      	cmp	r3, #8
 800645c:	d136      	bne.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d031      	beq.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a07      	ldr	r2, [pc, #28]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006474:	e001      	b.n	800647a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4902      	ldr	r1, [pc, #8]	; (800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006482:	428b      	cmp	r3, r1
 8006484:	d106      	bne.n	8006494 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006486:	4b02      	ldr	r3, [pc, #8]	; (8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006488:	e006      	b.n	8006498 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800648a:	bf00      	nop
 800648c:	40003800 	.word	0x40003800
 8006490:	40003400 	.word	0x40003400
 8006494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006498:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800649c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f043 0204 	orr.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fdc0 	bl	8006048 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064c8:	e000      	b.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064ca:	bf00      	nop
}
 80064cc:	bf00      	nop
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	1c99      	adds	r1, r3, #2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6251      	str	r1, [r2, #36]	; 0x24
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d113      	bne.n	8006542 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006528:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ffc9 	bl	80064d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	1c99      	adds	r1, r3, #2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6251      	str	r1, [r2, #36]	; 0x24
 800655e:	8819      	ldrh	r1, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <I2SEx_TxISR_I2SExt+0x90>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <I2SEx_TxISR_I2SExt+0x22>
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <I2SEx_TxISR_I2SExt+0x94>)
 800656c:	e001      	b.n	8006572 <I2SEx_TxISR_I2SExt+0x26>
 800656e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006572:	460a      	mov	r2, r1
 8006574:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d121      	bne.n	80065d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a12      	ldr	r2, [pc, #72]	; (80065dc <I2SEx_TxISR_I2SExt+0x90>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <I2SEx_TxISR_I2SExt+0x50>
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <I2SEx_TxISR_I2SExt+0x94>)
 800659a:	e001      	b.n	80065a0 <I2SEx_TxISR_I2SExt+0x54>
 800659c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	490d      	ldr	r1, [pc, #52]	; (80065dc <I2SEx_TxISR_I2SExt+0x90>)
 80065a8:	428b      	cmp	r3, r1
 80065aa:	d101      	bne.n	80065b0 <I2SEx_TxISR_I2SExt+0x64>
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <I2SEx_TxISR_I2SExt+0x94>)
 80065ae:	e001      	b.n	80065b4 <I2SEx_TxISR_I2SExt+0x68>
 80065b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff ff81 	bl	80064d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40003800 	.word	0x40003800
 80065e0:	40003400 	.word	0x40003400

080065e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68d8      	ldr	r0, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	1c99      	adds	r1, r3, #2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065fc:	b282      	uxth	r2, r0
 80065fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d113      	bne.n	8006640 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006626:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ff4a 	bl	80064d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <I2SEx_RxISR_I2SExt+0x90>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <I2SEx_RxISR_I2SExt+0x16>
 800665a:	4b20      	ldr	r3, [pc, #128]	; (80066dc <I2SEx_RxISR_I2SExt+0x94>)
 800665c:	e001      	b.n	8006662 <I2SEx_RxISR_I2SExt+0x1a>
 800665e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006662:	68d8      	ldr	r0, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	1c99      	adds	r1, r3, #2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800666e:	b282      	uxth	r2, r0
 8006670:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d121      	bne.n	80066ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <I2SEx_RxISR_I2SExt+0x90>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <I2SEx_RxISR_I2SExt+0x50>
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <I2SEx_RxISR_I2SExt+0x94>)
 8006696:	e001      	b.n	800669c <I2SEx_RxISR_I2SExt+0x54>
 8006698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	490d      	ldr	r1, [pc, #52]	; (80066d8 <I2SEx_RxISR_I2SExt+0x90>)
 80066a4:	428b      	cmp	r3, r1
 80066a6:	d101      	bne.n	80066ac <I2SEx_RxISR_I2SExt+0x64>
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <I2SEx_RxISR_I2SExt+0x94>)
 80066aa:	e001      	b.n	80066b0 <I2SEx_RxISR_I2SExt+0x68>
 80066ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff03 	bl	80064d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40003800 	.word	0x40003800
 80066dc:	40003400 	.word	0x40003400

080066e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e267      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d075      	beq.n	80067ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066fe:	4b88      	ldr	r3, [pc, #544]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 030c 	and.w	r3, r3, #12
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00c      	beq.n	8006724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800670a:	4b85      	ldr	r3, [pc, #532]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006712:	2b08      	cmp	r3, #8
 8006714:	d112      	bne.n	800673c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006716:	4b82      	ldr	r3, [pc, #520]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006722:	d10b      	bne.n	800673c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006724:	4b7e      	ldr	r3, [pc, #504]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d05b      	beq.n	80067e8 <HAL_RCC_OscConfig+0x108>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d157      	bne.n	80067e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e242      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006744:	d106      	bne.n	8006754 <HAL_RCC_OscConfig+0x74>
 8006746:	4b76      	ldr	r3, [pc, #472]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a75      	ldr	r2, [pc, #468]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e01d      	b.n	8006790 <HAL_RCC_OscConfig+0xb0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800675c:	d10c      	bne.n	8006778 <HAL_RCC_OscConfig+0x98>
 800675e:	4b70      	ldr	r3, [pc, #448]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a6f      	ldr	r2, [pc, #444]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	4b6d      	ldr	r3, [pc, #436]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a6c      	ldr	r2, [pc, #432]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	e00b      	b.n	8006790 <HAL_RCC_OscConfig+0xb0>
 8006778:	4b69      	ldr	r3, [pc, #420]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a68      	ldr	r2, [pc, #416]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800677e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4b66      	ldr	r3, [pc, #408]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a65      	ldr	r2, [pc, #404]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800678a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800678e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d013      	beq.n	80067c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006798:	f7fb fb88 	bl	8001eac <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fb fb84 	bl	8001eac <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	; 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e207      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0xc0>
 80067be:	e014      	b.n	80067ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fb fb74 	bl	8001eac <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fb fb70 	bl	8001eac <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e1f3      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067da:	4b51      	ldr	r3, [pc, #324]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0xe8>
 80067e6:	e000      	b.n	80067ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d063      	beq.n	80068be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006802:	4b47      	ldr	r3, [pc, #284]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800680a:	2b08      	cmp	r3, #8
 800680c:	d11c      	bne.n	8006848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800680e:	4b44      	ldr	r3, [pc, #272]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d116      	bne.n	8006848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681a:	4b41      	ldr	r3, [pc, #260]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_RCC_OscConfig+0x152>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e1c7      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b3b      	ldr	r3, [pc, #236]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4937      	ldr	r1, [pc, #220]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006846:	e03a      	b.n	80068be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d020      	beq.n	8006892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006850:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_RCC_OscConfig+0x244>)
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fb fb29 	bl	8001eac <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800685e:	f7fb fb25 	bl	8001eac <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e1a8      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006870:	4b2b      	ldr	r3, [pc, #172]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687c:	4b28      	ldr	r3, [pc, #160]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4925      	ldr	r1, [pc, #148]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 800688c:	4313      	orrs	r3, r2
 800688e:	600b      	str	r3, [r1, #0]
 8006890:	e015      	b.n	80068be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006892:	4b24      	ldr	r3, [pc, #144]	; (8006924 <HAL_RCC_OscConfig+0x244>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fb fb08 	bl	8001eac <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a0:	f7fb fb04 	bl	8001eac <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e187      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d036      	beq.n	8006938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <HAL_RCC_OscConfig+0x248>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d8:	f7fb fae8 	bl	8001eac <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068e0:	f7fb fae4 	bl	8001eac <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e167      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <HAL_RCC_OscConfig+0x240>)
 80068f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x200>
 80068fe:	e01b      	b.n	8006938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006900:	4b09      	ldr	r3, [pc, #36]	; (8006928 <HAL_RCC_OscConfig+0x248>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006906:	f7fb fad1 	bl	8001eac <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800690c:	e00e      	b.n	800692c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690e:	f7fb facd 	bl	8001eac <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d907      	bls.n	800692c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e150      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
 8006920:	40023800 	.word	0x40023800
 8006924:	42470000 	.word	0x42470000
 8006928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800692c:	4b88      	ldr	r3, [pc, #544]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 800692e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1ea      	bne.n	800690e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8097 	beq.w	8006a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800694a:	4b81      	ldr	r3, [pc, #516]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10f      	bne.n	8006976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	4b7d      	ldr	r3, [pc, #500]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	4a7c      	ldr	r2, [pc, #496]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006964:	6413      	str	r3, [r2, #64]	; 0x40
 8006966:	4b7a      	ldr	r3, [pc, #488]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006976:	4b77      	ldr	r3, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x474>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d118      	bne.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006982:	4b74      	ldr	r3, [pc, #464]	; (8006b54 <HAL_RCC_OscConfig+0x474>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a73      	ldr	r2, [pc, #460]	; (8006b54 <HAL_RCC_OscConfig+0x474>)
 8006988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800698e:	f7fb fa8d 	bl	8001eac <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006996:	f7fb fa89 	bl	8001eac <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e10c      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a8:	4b6a      	ldr	r3, [pc, #424]	; (8006b54 <HAL_RCC_OscConfig+0x474>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d106      	bne.n	80069ca <HAL_RCC_OscConfig+0x2ea>
 80069bc:	4b64      	ldr	r3, [pc, #400]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	4a63      	ldr	r2, [pc, #396]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6713      	str	r3, [r2, #112]	; 0x70
 80069c8:	e01c      	b.n	8006a04 <HAL_RCC_OscConfig+0x324>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d10c      	bne.n	80069ec <HAL_RCC_OscConfig+0x30c>
 80069d2:	4b5f      	ldr	r3, [pc, #380]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a5e      	ldr	r2, [pc, #376]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069d8:	f043 0304 	orr.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
 80069de:	4b5c      	ldr	r3, [pc, #368]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	4a5b      	ldr	r2, [pc, #364]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ea:	e00b      	b.n	8006a04 <HAL_RCC_OscConfig+0x324>
 80069ec:	4b58      	ldr	r3, [pc, #352]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a57      	ldr	r2, [pc, #348]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	4b55      	ldr	r3, [pc, #340]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	4a54      	ldr	r2, [pc, #336]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 80069fe:	f023 0304 	bic.w	r3, r3, #4
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d015      	beq.n	8006a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fb fa4e 	bl	8001eac <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a14:	f7fb fa4a 	bl	8001eac <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e0cb      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2a:	4b49      	ldr	r3, [pc, #292]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ee      	beq.n	8006a14 <HAL_RCC_OscConfig+0x334>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a38:	f7fb fa38 	bl	8001eac <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a40:	f7fb fa34 	bl	8001eac <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e0b5      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a56:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1ee      	bne.n	8006a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d105      	bne.n	8006a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a68:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	4a38      	ldr	r2, [pc, #224]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80a1 	beq.w	8006bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a7e:	4b34      	ldr	r3, [pc, #208]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d05c      	beq.n	8006b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d141      	bne.n	8006b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <HAL_RCC_OscConfig+0x478>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fb fa08 	bl	8001eac <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fb fa04 	bl	8001eac <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e087      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	4b27      	ldr	r3, [pc, #156]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69da      	ldr	r2, [r3, #28]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	019b      	lsls	r3, r3, #6
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	061b      	lsls	r3, r3, #24
 8006ae2:	491b      	ldr	r1, [pc, #108]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCC_OscConfig+0x478>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aee:	f7fb f9dd 	bl	8001eac <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af6:	f7fb f9d9 	bl	8001eac <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e05c      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x416>
 8006b14:	e054      	b.n	8006bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <HAL_RCC_OscConfig+0x478>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7fb f9c6 	bl	8001eac <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b24:	f7fb f9c2 	bl	8001eac <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e045      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <HAL_RCC_OscConfig+0x470>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x444>
 8006b42:	e03d      	b.n	8006bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e038      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40007000 	.word	0x40007000
 8006b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <HAL_RCC_OscConfig+0x4ec>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d028      	beq.n	8006bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d121      	bne.n	8006bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d11a      	bne.n	8006bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d111      	bne.n	8006bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d107      	bne.n	8006bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023800 	.word	0x40023800

08006bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0cc      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be4:	4b68      	ldr	r3, [pc, #416]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d90c      	bls.n	8006c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf2:	4b65      	ldr	r3, [pc, #404]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfa:	4b63      	ldr	r3, [pc, #396]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0b8      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c24:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a58      	ldr	r2, [pc, #352]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c3c:	4b53      	ldr	r3, [pc, #332]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4a52      	ldr	r2, [pc, #328]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b50      	ldr	r3, [pc, #320]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	494d      	ldr	r1, [pc, #308]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d044      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6e:	4b47      	ldr	r3, [pc, #284]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d119      	bne.n	8006cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e07f      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d003      	beq.n	8006c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8e:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e06f      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e067      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cae:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f023 0203 	bic.w	r2, r3, #3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4934      	ldr	r1, [pc, #208]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cc0:	f7fb f8f4 	bl	8001eac <HAL_GetTick>
 8006cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	e00a      	b.n	8006cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc8:	f7fb f8f0 	bl	8001eac <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e04f      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cde:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 020c 	and.w	r2, r3, #12
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d1eb      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d20c      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCC_ClockConfig+0x1b8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e032      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d24:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	4916      	ldr	r1, [pc, #88]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d42:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	490e      	ldr	r1, [pc, #56]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d56:	f000 f821 	bl	8006d9c <HAL_RCC_GetSysClockFreq>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	490a      	ldr	r1, [pc, #40]	; (8006d90 <HAL_RCC_ClockConfig+0x1c0>)
 8006d68:	5ccb      	ldrb	r3, [r1, r3]
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <HAL_RCC_ClockConfig+0x1c4>)
 8006d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <HAL_RCC_ClockConfig+0x1c8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fb f854 	bl	8001e24 <HAL_InitTick>

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023c00 	.word	0x40023c00
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	08008ce4 	.word	0x08008ce4
 8006d94:	20000000 	.word	0x20000000
 8006d98:	20000004 	.word	0x20000004

08006d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da0:	b094      	sub	sp, #80	; 0x50
 8006da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	647b      	str	r3, [r7, #68]	; 0x44
 8006da8:	2300      	movs	r3, #0
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dac:	2300      	movs	r3, #0
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006db4:	4b79      	ldr	r3, [pc, #484]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d00d      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0x40>
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	f200 80e1 	bhi.w	8006f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d003      	beq.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dce:	e0db      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dd0:	4b73      	ldr	r3, [pc, #460]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006dd4:	e0db      	b.n	8006f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dd6:	4b73      	ldr	r3, [pc, #460]	; (8006fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dda:	e0d8      	b.n	8006f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ddc:	4b6f      	ldr	r3, [pc, #444]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006de6:	4b6d      	ldr	r3, [pc, #436]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d063      	beq.n	8006eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006df2:	4b6a      	ldr	r3, [pc, #424]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	2200      	movs	r2, #0
 8006dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	2300      	movs	r3, #0
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e0e:	4622      	mov	r2, r4
 8006e10:	462b      	mov	r3, r5
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f04f 0100 	mov.w	r1, #0
 8006e1a:	0159      	lsls	r1, r3, #5
 8006e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e20:	0150      	lsls	r0, r2, #5
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4621      	mov	r1, r4
 8006e28:	1a51      	subs	r1, r2, r1
 8006e2a:	6139      	str	r1, [r7, #16]
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e40:	4659      	mov	r1, fp
 8006e42:	018b      	lsls	r3, r1, #6
 8006e44:	4651      	mov	r1, sl
 8006e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	018a      	lsls	r2, r1, #6
 8006e4e:	4651      	mov	r1, sl
 8006e50:	ebb2 0801 	subs.w	r8, r2, r1
 8006e54:	4659      	mov	r1, fp
 8006e56:	eb63 0901 	sbc.w	r9, r3, r1
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e6e:	4690      	mov	r8, r2
 8006e70:	4699      	mov	r9, r3
 8006e72:	4623      	mov	r3, r4
 8006e74:	eb18 0303 	adds.w	r3, r8, r3
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	eb49 0303 	adc.w	r3, r9, r3
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e8e:	4629      	mov	r1, r5
 8006e90:	024b      	lsls	r3, r1, #9
 8006e92:	4621      	mov	r1, r4
 8006e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e98:	4621      	mov	r1, r4
 8006e9a:	024a      	lsls	r2, r1, #9
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eac:	f7f9 fdfe 	bl	8000aac <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb8:	e058      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eba:	4b38      	ldr	r3, [pc, #224]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	099b      	lsrs	r3, r3, #6
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	f04f 0000 	mov.w	r0, #0
 8006edc:	f04f 0100 	mov.w	r1, #0
 8006ee0:	0159      	lsls	r1, r3, #5
 8006ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ee6:	0150      	lsls	r0, r2, #5
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4641      	mov	r1, r8
 8006eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8006f10:	eb63 050b 	sbc.w	r5, r3, fp
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	00eb      	lsls	r3, r5, #3
 8006f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f22:	00e2      	lsls	r2, r4, #3
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	4643      	mov	r3, r8
 8006f2a:	18e3      	adds	r3, r4, r3
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	464b      	mov	r3, r9
 8006f30:	eb45 0303 	adc.w	r3, r5, r3
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f42:	4629      	mov	r1, r5
 8006f44:	028b      	lsls	r3, r1, #10
 8006f46:	4621      	mov	r1, r4
 8006f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	028a      	lsls	r2, r1, #10
 8006f50:	4610      	mov	r0, r2
 8006f52:	4619      	mov	r1, r3
 8006f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f56:	2200      	movs	r2, #0
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	61fa      	str	r2, [r7, #28]
 8006f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f60:	f7f9 fda4 	bl	8000aac <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4613      	mov	r3, r2
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	3301      	adds	r3, #1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f86:	e002      	b.n	8006f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3750      	adds	r7, #80	; 0x50
 8006f94:	46bd      	mov	sp, r7
 8006f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	00f42400 	.word	0x00f42400
 8006fa4:	007a1200 	.word	0x007a1200

08006fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fac:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fae:	681b      	ldr	r3, [r3, #0]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000000 	.word	0x20000000

08006fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fc4:	f7ff fff0 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	0a9b      	lsrs	r3, r3, #10
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	4903      	ldr	r1, [pc, #12]	; (8006fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	08008cf4 	.word	0x08008cf4

08006fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fec:	f7ff ffdc 	bl	8006fa8 <HAL_RCC_GetHCLKFreq>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	0b5b      	lsrs	r3, r3, #13
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	4903      	ldr	r1, [pc, #12]	; (800700c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ffe:	5ccb      	ldrb	r3, [r1, r3]
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40023800 	.word	0x40023800
 800700c:	08008cf4 	.word	0x08008cf4

08007010 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d105      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007034:	2b00      	cmp	r3, #0
 8007036:	d035      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007038:	4b62      	ldr	r3, [pc, #392]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800703e:	f7fa ff35 	bl	8001eac <HAL_GetTick>
 8007042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007044:	e008      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007046:	f7fa ff31 	bl	8001eac <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0b0      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007058:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f0      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	019a      	lsls	r2, r3, #6
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	071b      	lsls	r3, r3, #28
 8007070:	4955      	ldr	r1, [pc, #340]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007078:	4b52      	ldr	r3, [pc, #328]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800707e:	f7fa ff15 	bl	8001eac <HAL_GetTick>
 8007082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007084:	e008      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007086:	f7fa ff11 	bl	8001eac <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e090      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007098:	4b4b      	ldr	r3, [pc, #300]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8083 	beq.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	4b44      	ldr	r3, [pc, #272]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	4a43      	ldr	r2, [pc, #268]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6413      	str	r3, [r2, #64]	; 0x40
 80070c2:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070ce:	4b3f      	ldr	r3, [pc, #252]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a3e      	ldr	r2, [pc, #248]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070da:	f7fa fee7 	bl	8001eac <HAL_GetTick>
 80070de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070e0:	e008      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070e2:	f7fa fee3 	bl	8001eac <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e062      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070f4:	4b35      	ldr	r3, [pc, #212]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007108:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d02f      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	d028      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800711e:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800712e:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007134:	4a24      	ldr	r2, [pc, #144]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800713c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b01      	cmp	r3, #1
 8007144:	d114      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007146:	f7fa feb1 	bl	8001eac <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	e00a      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800714e:	f7fa fead 	bl	8001eac <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e02a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ee      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800717c:	d10d      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800718e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007192:	490d      	ldr	r1, [pc, #52]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	4313      	orrs	r3, r2
 8007196:	608b      	str	r3, [r1, #8]
 8007198:	e005      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071a4:	6093      	str	r3, [r2, #8]
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b2:	4905      	ldr	r1, [pc, #20]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	42470068 	.word	0x42470068
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40007000 	.word	0x40007000
 80071d0:	42470e40 	.word	0x42470e40

080071d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d13e      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80071f2:	4b23      	ldr	r3, [pc, #140]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d12f      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007208:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800720a:	617b      	str	r3, [r7, #20]
          break;
 800720c:	e02f      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800720e:	4b1c      	ldr	r3, [pc, #112]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721a:	d108      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800721c:	4b18      	ldr	r3, [pc, #96]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007224:	4a18      	ldr	r2, [pc, #96]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	e007      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800722e:	4b14      	ldr	r3, [pc, #80]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800723e:	4b10      	ldr	r3, [pc, #64]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007244:	099b      	lsrs	r3, r3, #6
 8007246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007258:	0f1b      	lsrs	r3, r3, #28
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
          break;
 8007266:	e002      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
          break;
 800726c:	bf00      	nop
        }
      }
      break;
 800726e:	bf00      	nop
    }
  }
  return frequency;
 8007270:	697b      	ldr	r3, [r7, #20]
}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	00bb8000 	.word	0x00bb8000
 8007288:	007a1200 	.word	0x007a1200
 800728c:	00f42400 	.word	0x00f42400

08007290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e07b      	b.n	800739a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d108      	bne.n	80072bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b2:	d009      	beq.n	80072c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	61da      	str	r2, [r3, #28]
 80072ba:	e005      	b.n	80072c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa fb78 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	ea42 0103 	orr.w	r1, r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	f003 0104 	and.w	r1, r3, #4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	f003 0210 	and.w	r2, r3, #16
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e03f      	b.n	8007434 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fa fb4d 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2224      	movs	r2, #36	; 0x24
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f928 	bl	800763c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800740a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800741a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	4613      	mov	r3, r2
 800744a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b20      	cmp	r3, #32
 800745a:	d17c      	bne.n	8007556 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_UART_Transmit+0x2c>
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e075      	b.n	8007558 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_UART_Transmit+0x3e>
 8007476:	2302      	movs	r3, #2
 8007478:	e06e      	b.n	8007558 <HAL_UART_Transmit+0x11c>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2221      	movs	r2, #33	; 0x21
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007490:	f7fa fd0c 	bl	8001eac <HAL_GetTick>
 8007494:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	d108      	bne.n	80074be <HAL_UART_Transmit+0x82>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e003      	b.n	80074c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074ce:	e02a      	b.n	8007526 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f840 	bl	8007560 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e036      	b.n	8007558 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	3302      	adds	r3, #2
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	e007      	b.n	8007518 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	3301      	adds	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1cf      	bne.n	80074d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f810 	bl	8007560 <UART_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e006      	b.n	8007558 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b090      	sub	sp, #64	; 0x40
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007570:	e050      	b.n	8007614 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007578:	d04c      	beq.n	8007614 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <UART_WaitOnFlagUntilTimeout+0x30>
 8007580:	f7fa fc94 	bl	8001eac <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758c:	429a      	cmp	r2, r3
 800758e:	d241      	bcs.n	8007614 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075b0:	637a      	str	r2, [r7, #52]	; 0x34
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	613b      	str	r3, [r7, #16]
   return(result);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e4:	623a      	str	r2, [r7, #32]
 80075e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e00f      	b.n	8007634 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4013      	ands	r3, r2
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	429a      	cmp	r2, r3
 8007630:	d09f      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3740      	adds	r7, #64	; 0x40
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800763c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007640:	b0c0      	sub	sp, #256	; 0x100
 8007642:	af00      	add	r7, sp, #0
 8007644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007658:	68d9      	ldr	r1, [r3, #12]
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	ea40 0301 	orr.w	r3, r0, r1
 8007664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	431a      	orrs	r2, r3
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	431a      	orrs	r2, r3
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	4313      	orrs	r3, r2
 8007684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007694:	f021 010c 	bic.w	r1, r1, #12
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076a2:	430b      	orrs	r3, r1
 80076a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b6:	6999      	ldr	r1, [r3, #24]
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	ea40 0301 	orr.w	r3, r0, r1
 80076c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b8f      	ldr	r3, [pc, #572]	; (8007908 <UART_SetConfig+0x2cc>)
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d005      	beq.n	80076dc <UART_SetConfig+0xa0>
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b8d      	ldr	r3, [pc, #564]	; (800790c <UART_SetConfig+0x2d0>)
 80076d8:	429a      	cmp	r2, r3
 80076da:	d104      	bne.n	80076e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076dc:	f7ff fc84 	bl	8006fe8 <HAL_RCC_GetPCLK2Freq>
 80076e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076e4:	e003      	b.n	80076ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076e6:	f7ff fc6b 	bl	8006fc0 <HAL_RCC_GetPCLK1Freq>
 80076ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f8:	f040 810c 	bne.w	8007914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007700:	2200      	movs	r2, #0
 8007702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800770a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800770e:	4622      	mov	r2, r4
 8007710:	462b      	mov	r3, r5
 8007712:	1891      	adds	r1, r2, r2
 8007714:	65b9      	str	r1, [r7, #88]	; 0x58
 8007716:	415b      	adcs	r3, r3
 8007718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800771a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800771e:	4621      	mov	r1, r4
 8007720:	eb12 0801 	adds.w	r8, r2, r1
 8007724:	4629      	mov	r1, r5
 8007726:	eb43 0901 	adc.w	r9, r3, r1
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800773a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773e:	4690      	mov	r8, r2
 8007740:	4699      	mov	r9, r3
 8007742:	4623      	mov	r3, r4
 8007744:	eb18 0303 	adds.w	r3, r8, r3
 8007748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800774c:	462b      	mov	r3, r5
 800774e:	eb49 0303 	adc.w	r3, r9, r3
 8007752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800776a:	460b      	mov	r3, r1
 800776c:	18db      	adds	r3, r3, r3
 800776e:	653b      	str	r3, [r7, #80]	; 0x50
 8007770:	4613      	mov	r3, r2
 8007772:	eb42 0303 	adc.w	r3, r2, r3
 8007776:	657b      	str	r3, [r7, #84]	; 0x54
 8007778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800777c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007780:	f7f9 f994 	bl	8000aac <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b61      	ldr	r3, [pc, #388]	; (8007910 <UART_SetConfig+0x2d4>)
 800778a:	fba3 2302 	umull	r2, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	011c      	lsls	r4, r3, #4
 8007792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007796:	2200      	movs	r2, #0
 8007798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800779c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	1891      	adds	r1, r2, r2
 80077aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80077ac:	415b      	adcs	r3, r3
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077b4:	4641      	mov	r1, r8
 80077b6:	eb12 0a01 	adds.w	sl, r2, r1
 80077ba:	4649      	mov	r1, r9
 80077bc:	eb43 0b01 	adc.w	fp, r3, r1
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d4:	4692      	mov	sl, r2
 80077d6:	469b      	mov	fp, r3
 80077d8:	4643      	mov	r3, r8
 80077da:	eb1a 0303 	adds.w	r3, sl, r3
 80077de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077e2:	464b      	mov	r3, r9
 80077e4:	eb4b 0303 	adc.w	r3, fp, r3
 80077e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007800:	460b      	mov	r3, r1
 8007802:	18db      	adds	r3, r3, r3
 8007804:	643b      	str	r3, [r7, #64]	; 0x40
 8007806:	4613      	mov	r3, r2
 8007808:	eb42 0303 	adc.w	r3, r2, r3
 800780c:	647b      	str	r3, [r7, #68]	; 0x44
 800780e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007816:	f7f9 f949 	bl	8000aac <__aeabi_uldivmod>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4611      	mov	r1, r2
 8007820:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <UART_SetConfig+0x2d4>)
 8007822:	fba3 2301 	umull	r2, r3, r3, r1
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	2264      	movs	r2, #100	; 0x64
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	1acb      	subs	r3, r1, r3
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007836:	4b36      	ldr	r3, [pc, #216]	; (8007910 <UART_SetConfig+0x2d4>)
 8007838:	fba3 2302 	umull	r2, r3, r3, r2
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007844:	441c      	add	r4, r3
 8007846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800784a:	2200      	movs	r2, #0
 800784c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	1891      	adds	r1, r2, r2
 800785e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007860:	415b      	adcs	r3, r3
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007868:	4641      	mov	r1, r8
 800786a:	1851      	adds	r1, r2, r1
 800786c:	6339      	str	r1, [r7, #48]	; 0x30
 800786e:	4649      	mov	r1, r9
 8007870:	414b      	adcs	r3, r1
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007880:	4659      	mov	r1, fp
 8007882:	00cb      	lsls	r3, r1, #3
 8007884:	4651      	mov	r1, sl
 8007886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800788a:	4651      	mov	r1, sl
 800788c:	00ca      	lsls	r2, r1, #3
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	4603      	mov	r3, r0
 8007894:	4642      	mov	r2, r8
 8007896:	189b      	adds	r3, r3, r2
 8007898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800789c:	464b      	mov	r3, r9
 800789e:	460a      	mov	r2, r1
 80078a0:	eb42 0303 	adc.w	r3, r2, r3
 80078a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078bc:	460b      	mov	r3, r1
 80078be:	18db      	adds	r3, r3, r3
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c2:	4613      	mov	r3, r2
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078d2:	f7f9 f8eb 	bl	8000aac <__aeabi_uldivmod>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <UART_SetConfig+0x2d4>)
 80078dc:	fba3 1302 	umull	r1, r3, r3, r2
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	2164      	movs	r1, #100	; 0x64
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	3332      	adds	r3, #50	; 0x32
 80078ee:	4a08      	ldr	r2, [pc, #32]	; (8007910 <UART_SetConfig+0x2d4>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	f003 0207 	and.w	r2, r3, #7
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4422      	add	r2, r4
 8007902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007904:	e106      	b.n	8007b14 <UART_SetConfig+0x4d8>
 8007906:	bf00      	nop
 8007908:	40011000 	.word	0x40011000
 800790c:	40011400 	.word	0x40011400
 8007910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007918:	2200      	movs	r2, #0
 800791a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007926:	4642      	mov	r2, r8
 8007928:	464b      	mov	r3, r9
 800792a:	1891      	adds	r1, r2, r2
 800792c:	6239      	str	r1, [r7, #32]
 800792e:	415b      	adcs	r3, r3
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
 8007932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007936:	4641      	mov	r1, r8
 8007938:	1854      	adds	r4, r2, r1
 800793a:	4649      	mov	r1, r9
 800793c:	eb43 0501 	adc.w	r5, r3, r1
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	00eb      	lsls	r3, r5, #3
 800794a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800794e:	00e2      	lsls	r2, r4, #3
 8007950:	4614      	mov	r4, r2
 8007952:	461d      	mov	r5, r3
 8007954:	4643      	mov	r3, r8
 8007956:	18e3      	adds	r3, r4, r3
 8007958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800795c:	464b      	mov	r3, r9
 800795e:	eb45 0303 	adc.w	r3, r5, r3
 8007962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007982:	4629      	mov	r1, r5
 8007984:	008b      	lsls	r3, r1, #2
 8007986:	4621      	mov	r1, r4
 8007988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800798c:	4621      	mov	r1, r4
 800798e:	008a      	lsls	r2, r1, #2
 8007990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007994:	f7f9 f88a 	bl	8000aac <__aeabi_uldivmod>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4b60      	ldr	r3, [pc, #384]	; (8007b20 <UART_SetConfig+0x4e4>)
 800799e:	fba3 2302 	umull	r2, r3, r3, r2
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	011c      	lsls	r4, r3, #4
 80079a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	1891      	adds	r1, r2, r2
 80079be:	61b9      	str	r1, [r7, #24]
 80079c0:	415b      	adcs	r3, r3
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079c8:	4641      	mov	r1, r8
 80079ca:	1851      	adds	r1, r2, r1
 80079cc:	6139      	str	r1, [r7, #16]
 80079ce:	4649      	mov	r1, r9
 80079d0:	414b      	adcs	r3, r1
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079e0:	4659      	mov	r1, fp
 80079e2:	00cb      	lsls	r3, r1, #3
 80079e4:	4651      	mov	r1, sl
 80079e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ea:	4651      	mov	r1, sl
 80079ec:	00ca      	lsls	r2, r1, #3
 80079ee:	4610      	mov	r0, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	4642      	mov	r2, r8
 80079f6:	189b      	adds	r3, r3, r2
 80079f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079fc:	464b      	mov	r3, r9
 80079fe:	460a      	mov	r2, r1
 8007a00:	eb42 0303 	adc.w	r3, r2, r3
 8007a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a20:	4649      	mov	r1, r9
 8007a22:	008b      	lsls	r3, r1, #2
 8007a24:	4641      	mov	r1, r8
 8007a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	008a      	lsls	r2, r1, #2
 8007a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a32:	f7f9 f83b 	bl	8000aac <__aeabi_uldivmod>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4b38      	ldr	r3, [pc, #224]	; (8007b20 <UART_SetConfig+0x4e4>)
 8007a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	2264      	movs	r2, #100	; 0x64
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
 8007a4a:	1acb      	subs	r3, r1, r3
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	3332      	adds	r3, #50	; 0x32
 8007a50:	4a33      	ldr	r2, [pc, #204]	; (8007b20 <UART_SetConfig+0x4e4>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a5c:	441c      	add	r4, r3
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	673b      	str	r3, [r7, #112]	; 0x70
 8007a66:	677a      	str	r2, [r7, #116]	; 0x74
 8007a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	1891      	adds	r1, r2, r2
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	415b      	adcs	r3, r3
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	1851      	adds	r1, r2, r1
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	4649      	mov	r1, r9
 8007a84:	414b      	adcs	r3, r1
 8007a86:	607b      	str	r3, [r7, #4]
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a94:	4659      	mov	r1, fp
 8007a96:	00cb      	lsls	r3, r1, #3
 8007a98:	4651      	mov	r1, sl
 8007a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a9e:	4651      	mov	r1, sl
 8007aa0:	00ca      	lsls	r2, r1, #3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	189b      	adds	r3, r3, r2
 8007aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aae:	464b      	mov	r3, r9
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	eb42 0303 	adc.w	r3, r2, r3
 8007ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	008b      	lsls	r3, r1, #2
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ada:	4641      	mov	r1, r8
 8007adc:	008a      	lsls	r2, r1, #2
 8007ade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ae2:	f7f8 ffe3 	bl	8000aac <__aeabi_uldivmod>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <UART_SetConfig+0x4e4>)
 8007aec:	fba3 1302 	umull	r1, r3, r3, r2
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	2164      	movs	r1, #100	; 0x64
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	3332      	adds	r3, #50	; 0x32
 8007afe:	4a08      	ldr	r2, [pc, #32]	; (8007b20 <UART_SetConfig+0x4e4>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4422      	add	r2, r4
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b20:	51eb851f 	.word	0x51eb851f

08007b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b24:	b084      	sub	sp, #16
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	f107 001c 	add.w	r0, r7, #28
 8007b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d122      	bne.n	8007b82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d105      	bne.n	8007b76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f970 	bl	8007e5c <USB_CoreReset>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e01a      	b.n	8007bb8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f964 	bl	8007e5c <USB_CoreReset>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8007baa:	e005      	b.n	8007bb8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10b      	bne.n	8007bd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f043 0206 	orr.w	r2, r3, #6
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be2:	b004      	add	sp, #16
 8007be4:	4770      	bx	lr

08007be6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 0201 	bic.w	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d115      	bne.n	8007c56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c36:	2001      	movs	r0, #1
 8007c38:	f7fa f944 	bl	8001ec4 <HAL_Delay>
      ms++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8fb 	bl	8007e3e <USB_GetMode>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d01e      	beq.n	8007c8c <USB_SetCurrentMode+0x84>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b31      	cmp	r3, #49	; 0x31
 8007c52:	d9f0      	bls.n	8007c36 <USB_SetCurrentMode+0x2e>
 8007c54:	e01a      	b.n	8007c8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d115      	bne.n	8007c88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f7fa f92b 	bl	8001ec4 <HAL_Delay>
      ms++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8e2 	bl	8007e3e <USB_GetMode>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <USB_SetCurrentMode+0x84>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b31      	cmp	r3, #49	; 0x31
 8007c84:	d9f0      	bls.n	8007c68 <USB_SetCurrentMode+0x60>
 8007c86:	e001      	b.n	8007c8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e005      	b.n	8007c98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b32      	cmp	r3, #50	; 0x32
 8007c90:	d101      	bne.n	8007c96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <USB_FlushTxFifo+0x64>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d901      	bls.n	8007cc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e01b      	b.n	8007cf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	daf2      	bge.n	8007cae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	019b      	lsls	r3, r3, #6
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <USB_FlushTxFifo+0x64>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e006      	b.n	8007cf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d0f0      	beq.n	8007cd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	00030d40 	.word	0x00030d40

08007d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <USB_FlushRxFifo+0x5c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e018      	b.n	8007d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	daf2      	bge.n	8007d14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2210      	movs	r2, #16
 8007d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a08      	ldr	r2, [pc, #32]	; (8007d64 <USB_FlushRxFifo+0x5c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e006      	b.n	8007d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d0f0      	beq.n	8007d38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b08b      	sub	sp, #44	; 0x2c
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	089b      	lsrs	r3, r3, #2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d8e:	2300      	movs	r3, #0
 8007d90:	623b      	str	r3, [r7, #32]
 8007d92:	e014      	b.n	8007dbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	3301      	adds	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	3301      	adds	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	3301      	adds	r3, #1
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	3301      	adds	r3, #1
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d3e6      	bcc.n	8007d94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dc6:	8bfb      	ldrh	r3, [r7, #30]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01e      	beq.n	8007e0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	701a      	strb	r2, [r3, #0]
      i++;
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	3301      	adds	r3, #1
 8007df6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007dfe:	8bfb      	ldrh	r3, [r7, #30]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e04:	8bfb      	ldrh	r3, [r7, #30]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1ea      	bne.n	8007de0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	372c      	adds	r7, #44	; 0x2c
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e30:	68fb      	ldr	r3, [r7, #12]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4a13      	ldr	r2, [pc, #76]	; (8007ec0 <USB_CoreReset+0x64>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e01b      	b.n	8007eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	daf2      	bge.n	8007e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f043 0201 	orr.w	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <USB_CoreReset+0x64>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e006      	b.n	8007eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d0f0      	beq.n	8007e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	00030d40 	.word	0x00030d40

08007ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d10a      	bne.n	8007f36 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f2e:	f043 0304 	orr.w	r3, r3, #4
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	e014      	b.n	8007f60 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f44:	f023 0304 	bic.w	r3, r3, #4
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e009      	b.n	8007f60 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f5a:	f023 0304 	bic.w	r3, r3, #4
 8007f5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f60:	2110      	movs	r1, #16
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe9c 	bl	8007ca0 <USB_FlushTxFifo>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fec8 	bl	8007d08 <USB_FlushRxFifo>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	e015      	b.n	8007fb4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3e5      	bcc.n	8007f88 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <USB_HostInit+0x16c>)
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_HostInit+0x170>)
 8007fe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fec:	e009      	b.n	8008002 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2280      	movs	r2, #128	; 0x80
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <USB_HostInit+0x174>)
 8007ff8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <USB_HostInit+0x178>)
 8007ffe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f043 0210 	orr.w	r2, r3, #16
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	4b09      	ldr	r3, [pc, #36]	; (8008040 <USB_HostInit+0x17c>)
 800801a:	4313      	orrs	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800802c:	b004      	add	sp, #16
 800802e:	4770      	bx	lr
 8008030:	01000200 	.word	0x01000200
 8008034:	00e00300 	.word	0x00e00300
 8008038:	00600080 	.word	0x00600080
 800803c:	004000e0 	.word	0x004000e0
 8008040:	a3200008 	.word	0xa3200008

08008044 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808c:	461a      	mov	r2, r3
 800808e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008092:	6053      	str	r3, [r2, #4]
 8008094:	e009      	b.n	80080aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d106      	bne.n	80080aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	461a      	mov	r2, r3
 80080a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80080a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	b29b      	uxth	r3, r3
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080da:	b480      	push	{r7}
 80080dc:	b089      	sub	sp, #36	; 0x24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	0c9b      	lsrs	r3, r3, #18
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	0fdb      	lsrs	r3, r3, #31
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d104      	bne.n	8008134 <USB_HC_Halt+0x5a>
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e0c8      	b.n	80082c6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <USB_HC_Halt+0x66>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d163      	bne.n	8008208 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800815a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800815e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	f040 80ab 	bne.w	80082c4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d133      	bne.n	80081e2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	440a      	add	r2, r1
 8008190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008198:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081b8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c6:	d81d      	bhi.n	8008204 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081de:	d0ec      	beq.n	80081ba <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081e0:	e070      	b.n	80082c4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	0151      	lsls	r1, r2, #5
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	440a      	add	r2, r1
 80081f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008200:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008202:	e05f      	b.n	80082c4 <USB_HC_Halt+0x1ea>
            break;
 8008204:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008206:	e05d      	b.n	80082c4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008226:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d133      	bne.n	80082a0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	440a      	add	r2, r1
 800824e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008256:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	440a      	add	r2, r1
 800826e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008276:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008284:	d81d      	bhi.n	80082c2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800829c:	d0ec      	beq.n	8008278 <USB_HC_Halt+0x19e>
 800829e:	e011      	b.n	80082c4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e000      	b.n	80082c4 <USB_HC_Halt+0x1ea>
          break;
 80082c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3724      	adds	r7, #36	; 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <siprintf>:
 80082d4:	b40e      	push	{r1, r2, r3}
 80082d6:	b500      	push	{lr}
 80082d8:	b09c      	sub	sp, #112	; 0x70
 80082da:	ab1d      	add	r3, sp, #116	; 0x74
 80082dc:	9002      	str	r0, [sp, #8]
 80082de:	9006      	str	r0, [sp, #24]
 80082e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082e4:	4809      	ldr	r0, [pc, #36]	; (800830c <siprintf+0x38>)
 80082e6:	9107      	str	r1, [sp, #28]
 80082e8:	9104      	str	r1, [sp, #16]
 80082ea:	4909      	ldr	r1, [pc, #36]	; (8008310 <siprintf+0x3c>)
 80082ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f0:	9105      	str	r1, [sp, #20]
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	a902      	add	r1, sp, #8
 80082f8:	f000 f9cc 	bl	8008694 <_svfiprintf_r>
 80082fc:	9b02      	ldr	r3, [sp, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	b01c      	add	sp, #112	; 0x70
 8008304:	f85d eb04 	ldr.w	lr, [sp], #4
 8008308:	b003      	add	sp, #12
 800830a:	4770      	bx	lr
 800830c:	20000058 	.word	0x20000058
 8008310:	ffff0208 	.word	0xffff0208

08008314 <_vsniprintf_r>:
 8008314:	b530      	push	{r4, r5, lr}
 8008316:	4614      	mov	r4, r2
 8008318:	2c00      	cmp	r4, #0
 800831a:	b09b      	sub	sp, #108	; 0x6c
 800831c:	4605      	mov	r5, r0
 800831e:	461a      	mov	r2, r3
 8008320:	da05      	bge.n	800832e <_vsniprintf_r+0x1a>
 8008322:	238b      	movs	r3, #139	; 0x8b
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800832a:	b01b      	add	sp, #108	; 0x6c
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008332:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008336:	bf14      	ite	ne
 8008338:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800833c:	4623      	moveq	r3, r4
 800833e:	9302      	str	r3, [sp, #8]
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008346:	9100      	str	r1, [sp, #0]
 8008348:	9104      	str	r1, [sp, #16]
 800834a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800834e:	4669      	mov	r1, sp
 8008350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008352:	f000 f99f 	bl	8008694 <_svfiprintf_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	bfbc      	itt	lt
 800835a:	238b      	movlt	r3, #139	; 0x8b
 800835c:	602b      	strlt	r3, [r5, #0]
 800835e:	2c00      	cmp	r4, #0
 8008360:	d0e3      	beq.n	800832a <_vsniprintf_r+0x16>
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e7df      	b.n	800832a <_vsniprintf_r+0x16>
	...

0800836c <vsniprintf>:
 800836c:	b507      	push	{r0, r1, r2, lr}
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	460a      	mov	r2, r1
 8008374:	4601      	mov	r1, r0
 8008376:	4803      	ldr	r0, [pc, #12]	; (8008384 <vsniprintf+0x18>)
 8008378:	6800      	ldr	r0, [r0, #0]
 800837a:	f7ff ffcb 	bl	8008314 <_vsniprintf_r>
 800837e:	b003      	add	sp, #12
 8008380:	f85d fb04 	ldr.w	pc, [sp], #4
 8008384:	20000058 	.word	0x20000058

08008388 <memset>:
 8008388:	4402      	add	r2, r0
 800838a:	4603      	mov	r3, r0
 800838c:	4293      	cmp	r3, r2
 800838e:	d100      	bne.n	8008392 <memset+0xa>
 8008390:	4770      	bx	lr
 8008392:	f803 1b01 	strb.w	r1, [r3], #1
 8008396:	e7f9      	b.n	800838c <memset+0x4>

08008398 <__errno>:
 8008398:	4b01      	ldr	r3, [pc, #4]	; (80083a0 <__errno+0x8>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000058 	.word	0x20000058

080083a4 <__libc_init_array>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4d0d      	ldr	r5, [pc, #52]	; (80083dc <__libc_init_array+0x38>)
 80083a8:	4c0d      	ldr	r4, [pc, #52]	; (80083e0 <__libc_init_array+0x3c>)
 80083aa:	1b64      	subs	r4, r4, r5
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	2600      	movs	r6, #0
 80083b0:	42a6      	cmp	r6, r4
 80083b2:	d109      	bne.n	80083c8 <__libc_init_array+0x24>
 80083b4:	4d0b      	ldr	r5, [pc, #44]	; (80083e4 <__libc_init_array+0x40>)
 80083b6:	4c0c      	ldr	r4, [pc, #48]	; (80083e8 <__libc_init_array+0x44>)
 80083b8:	f000 fc6a 	bl	8008c90 <_init>
 80083bc:	1b64      	subs	r4, r4, r5
 80083be:	10a4      	asrs	r4, r4, #2
 80083c0:	2600      	movs	r6, #0
 80083c2:	42a6      	cmp	r6, r4
 80083c4:	d105      	bne.n	80083d2 <__libc_init_array+0x2e>
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083cc:	4798      	blx	r3
 80083ce:	3601      	adds	r6, #1
 80083d0:	e7ee      	b.n	80083b0 <__libc_init_array+0xc>
 80083d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d6:	4798      	blx	r3
 80083d8:	3601      	adds	r6, #1
 80083da:	e7f2      	b.n	80083c2 <__libc_init_array+0x1e>
 80083dc:	08008d38 	.word	0x08008d38
 80083e0:	08008d38 	.word	0x08008d38
 80083e4:	08008d38 	.word	0x08008d38
 80083e8:	08008d3c 	.word	0x08008d3c

080083ec <__retarget_lock_acquire_recursive>:
 80083ec:	4770      	bx	lr

080083ee <__retarget_lock_release_recursive>:
 80083ee:	4770      	bx	lr

080083f0 <_free_r>:
 80083f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083f2:	2900      	cmp	r1, #0
 80083f4:	d044      	beq.n	8008480 <_free_r+0x90>
 80083f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fa:	9001      	str	r0, [sp, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008402:	bfb8      	it	lt
 8008404:	18e4      	addlt	r4, r4, r3
 8008406:	f000 f8df 	bl	80085c8 <__malloc_lock>
 800840a:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <_free_r+0x94>)
 800840c:	9801      	ldr	r0, [sp, #4]
 800840e:	6813      	ldr	r3, [r2, #0]
 8008410:	b933      	cbnz	r3, 8008420 <_free_r+0x30>
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	6014      	str	r4, [r2, #0]
 8008416:	b003      	add	sp, #12
 8008418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800841c:	f000 b8da 	b.w	80085d4 <__malloc_unlock>
 8008420:	42a3      	cmp	r3, r4
 8008422:	d908      	bls.n	8008436 <_free_r+0x46>
 8008424:	6825      	ldr	r5, [r4, #0]
 8008426:	1961      	adds	r1, r4, r5
 8008428:	428b      	cmp	r3, r1
 800842a:	bf01      	itttt	eq
 800842c:	6819      	ldreq	r1, [r3, #0]
 800842e:	685b      	ldreq	r3, [r3, #4]
 8008430:	1949      	addeq	r1, r1, r5
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	e7ed      	b.n	8008412 <_free_r+0x22>
 8008436:	461a      	mov	r2, r3
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	b10b      	cbz	r3, 8008440 <_free_r+0x50>
 800843c:	42a3      	cmp	r3, r4
 800843e:	d9fa      	bls.n	8008436 <_free_r+0x46>
 8008440:	6811      	ldr	r1, [r2, #0]
 8008442:	1855      	adds	r5, r2, r1
 8008444:	42a5      	cmp	r5, r4
 8008446:	d10b      	bne.n	8008460 <_free_r+0x70>
 8008448:	6824      	ldr	r4, [r4, #0]
 800844a:	4421      	add	r1, r4
 800844c:	1854      	adds	r4, r2, r1
 800844e:	42a3      	cmp	r3, r4
 8008450:	6011      	str	r1, [r2, #0]
 8008452:	d1e0      	bne.n	8008416 <_free_r+0x26>
 8008454:	681c      	ldr	r4, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	6053      	str	r3, [r2, #4]
 800845a:	440c      	add	r4, r1
 800845c:	6014      	str	r4, [r2, #0]
 800845e:	e7da      	b.n	8008416 <_free_r+0x26>
 8008460:	d902      	bls.n	8008468 <_free_r+0x78>
 8008462:	230c      	movs	r3, #12
 8008464:	6003      	str	r3, [r0, #0]
 8008466:	e7d6      	b.n	8008416 <_free_r+0x26>
 8008468:	6825      	ldr	r5, [r4, #0]
 800846a:	1961      	adds	r1, r4, r5
 800846c:	428b      	cmp	r3, r1
 800846e:	bf04      	itt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	6063      	str	r3, [r4, #4]
 8008476:	bf04      	itt	eq
 8008478:	1949      	addeq	r1, r1, r5
 800847a:	6021      	streq	r1, [r4, #0]
 800847c:	6054      	str	r4, [r2, #4]
 800847e:	e7ca      	b.n	8008416 <_free_r+0x26>
 8008480:	b003      	add	sp, #12
 8008482:	bd30      	pop	{r4, r5, pc}
 8008484:	20000648 	.word	0x20000648

08008488 <sbrk_aligned>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4e0e      	ldr	r6, [pc, #56]	; (80084c4 <sbrk_aligned+0x3c>)
 800848c:	460c      	mov	r4, r1
 800848e:	6831      	ldr	r1, [r6, #0]
 8008490:	4605      	mov	r5, r0
 8008492:	b911      	cbnz	r1, 800849a <sbrk_aligned+0x12>
 8008494:	f000 fba6 	bl	8008be4 <_sbrk_r>
 8008498:	6030      	str	r0, [r6, #0]
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f000 fba1 	bl	8008be4 <_sbrk_r>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d00a      	beq.n	80084bc <sbrk_aligned+0x34>
 80084a6:	1cc4      	adds	r4, r0, #3
 80084a8:	f024 0403 	bic.w	r4, r4, #3
 80084ac:	42a0      	cmp	r0, r4
 80084ae:	d007      	beq.n	80084c0 <sbrk_aligned+0x38>
 80084b0:	1a21      	subs	r1, r4, r0
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 fb96 	bl	8008be4 <_sbrk_r>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d101      	bne.n	80084c0 <sbrk_aligned+0x38>
 80084bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084c0:	4620      	mov	r0, r4
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	2000064c 	.word	0x2000064c

080084c8 <_malloc_r>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	1ccd      	adds	r5, r1, #3
 80084ce:	f025 0503 	bic.w	r5, r5, #3
 80084d2:	3508      	adds	r5, #8
 80084d4:	2d0c      	cmp	r5, #12
 80084d6:	bf38      	it	cc
 80084d8:	250c      	movcc	r5, #12
 80084da:	2d00      	cmp	r5, #0
 80084dc:	4607      	mov	r7, r0
 80084de:	db01      	blt.n	80084e4 <_malloc_r+0x1c>
 80084e0:	42a9      	cmp	r1, r5
 80084e2:	d905      	bls.n	80084f0 <_malloc_r+0x28>
 80084e4:	230c      	movs	r3, #12
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	2600      	movs	r6, #0
 80084ea:	4630      	mov	r0, r6
 80084ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085c4 <_malloc_r+0xfc>
 80084f4:	f000 f868 	bl	80085c8 <__malloc_lock>
 80084f8:	f8d8 3000 	ldr.w	r3, [r8]
 80084fc:	461c      	mov	r4, r3
 80084fe:	bb5c      	cbnz	r4, 8008558 <_malloc_r+0x90>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ffc0 	bl	8008488 <sbrk_aligned>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	4604      	mov	r4, r0
 800850c:	d155      	bne.n	80085ba <_malloc_r+0xf2>
 800850e:	f8d8 4000 	ldr.w	r4, [r8]
 8008512:	4626      	mov	r6, r4
 8008514:	2e00      	cmp	r6, #0
 8008516:	d145      	bne.n	80085a4 <_malloc_r+0xdc>
 8008518:	2c00      	cmp	r4, #0
 800851a:	d048      	beq.n	80085ae <_malloc_r+0xe6>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	4631      	mov	r1, r6
 8008520:	4638      	mov	r0, r7
 8008522:	eb04 0903 	add.w	r9, r4, r3
 8008526:	f000 fb5d 	bl	8008be4 <_sbrk_r>
 800852a:	4581      	cmp	r9, r0
 800852c:	d13f      	bne.n	80085ae <_malloc_r+0xe6>
 800852e:	6821      	ldr	r1, [r4, #0]
 8008530:	1a6d      	subs	r5, r5, r1
 8008532:	4629      	mov	r1, r5
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff ffa7 	bl	8008488 <sbrk_aligned>
 800853a:	3001      	adds	r0, #1
 800853c:	d037      	beq.n	80085ae <_malloc_r+0xe6>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	442b      	add	r3, r5
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	f8d8 3000 	ldr.w	r3, [r8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d038      	beq.n	80085be <_malloc_r+0xf6>
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	42a2      	cmp	r2, r4
 8008550:	d12b      	bne.n	80085aa <_malloc_r+0xe2>
 8008552:	2200      	movs	r2, #0
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	e00f      	b.n	8008578 <_malloc_r+0xb0>
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	1b52      	subs	r2, r2, r5
 800855c:	d41f      	bmi.n	800859e <_malloc_r+0xd6>
 800855e:	2a0b      	cmp	r2, #11
 8008560:	d917      	bls.n	8008592 <_malloc_r+0xca>
 8008562:	1961      	adds	r1, r4, r5
 8008564:	42a3      	cmp	r3, r4
 8008566:	6025      	str	r5, [r4, #0]
 8008568:	bf18      	it	ne
 800856a:	6059      	strne	r1, [r3, #4]
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	bf08      	it	eq
 8008570:	f8c8 1000 	streq.w	r1, [r8]
 8008574:	5162      	str	r2, [r4, r5]
 8008576:	604b      	str	r3, [r1, #4]
 8008578:	4638      	mov	r0, r7
 800857a:	f104 060b 	add.w	r6, r4, #11
 800857e:	f000 f829 	bl	80085d4 <__malloc_unlock>
 8008582:	f026 0607 	bic.w	r6, r6, #7
 8008586:	1d23      	adds	r3, r4, #4
 8008588:	1af2      	subs	r2, r6, r3
 800858a:	d0ae      	beq.n	80084ea <_malloc_r+0x22>
 800858c:	1b9b      	subs	r3, r3, r6
 800858e:	50a3      	str	r3, [r4, r2]
 8008590:	e7ab      	b.n	80084ea <_malloc_r+0x22>
 8008592:	42a3      	cmp	r3, r4
 8008594:	6862      	ldr	r2, [r4, #4]
 8008596:	d1dd      	bne.n	8008554 <_malloc_r+0x8c>
 8008598:	f8c8 2000 	str.w	r2, [r8]
 800859c:	e7ec      	b.n	8008578 <_malloc_r+0xb0>
 800859e:	4623      	mov	r3, r4
 80085a0:	6864      	ldr	r4, [r4, #4]
 80085a2:	e7ac      	b.n	80084fe <_malloc_r+0x36>
 80085a4:	4634      	mov	r4, r6
 80085a6:	6876      	ldr	r6, [r6, #4]
 80085a8:	e7b4      	b.n	8008514 <_malloc_r+0x4c>
 80085aa:	4613      	mov	r3, r2
 80085ac:	e7cc      	b.n	8008548 <_malloc_r+0x80>
 80085ae:	230c      	movs	r3, #12
 80085b0:	603b      	str	r3, [r7, #0]
 80085b2:	4638      	mov	r0, r7
 80085b4:	f000 f80e 	bl	80085d4 <__malloc_unlock>
 80085b8:	e797      	b.n	80084ea <_malloc_r+0x22>
 80085ba:	6025      	str	r5, [r4, #0]
 80085bc:	e7dc      	b.n	8008578 <_malloc_r+0xb0>
 80085be:	605b      	str	r3, [r3, #4]
 80085c0:	deff      	udf	#255	; 0xff
 80085c2:	bf00      	nop
 80085c4:	20000648 	.word	0x20000648

080085c8 <__malloc_lock>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__malloc_lock+0x8>)
 80085ca:	f7ff bf0f 	b.w	80083ec <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	20000644 	.word	0x20000644

080085d4 <__malloc_unlock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__malloc_unlock+0x8>)
 80085d6:	f7ff bf0a 	b.w	80083ee <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	20000644 	.word	0x20000644

080085e0 <__ssputs_r>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	688e      	ldr	r6, [r1, #8]
 80085e6:	461f      	mov	r7, r3
 80085e8:	42be      	cmp	r6, r7
 80085ea:	680b      	ldr	r3, [r1, #0]
 80085ec:	4682      	mov	sl, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4690      	mov	r8, r2
 80085f2:	d82c      	bhi.n	800864e <__ssputs_r+0x6e>
 80085f4:	898a      	ldrh	r2, [r1, #12]
 80085f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085fa:	d026      	beq.n	800864a <__ssputs_r+0x6a>
 80085fc:	6965      	ldr	r5, [r4, #20]
 80085fe:	6909      	ldr	r1, [r1, #16]
 8008600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008604:	eba3 0901 	sub.w	r9, r3, r1
 8008608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800860c:	1c7b      	adds	r3, r7, #1
 800860e:	444b      	add	r3, r9
 8008610:	106d      	asrs	r5, r5, #1
 8008612:	429d      	cmp	r5, r3
 8008614:	bf38      	it	cc
 8008616:	461d      	movcc	r5, r3
 8008618:	0553      	lsls	r3, r2, #21
 800861a:	d527      	bpl.n	800866c <__ssputs_r+0x8c>
 800861c:	4629      	mov	r1, r5
 800861e:	f7ff ff53 	bl	80084c8 <_malloc_r>
 8008622:	4606      	mov	r6, r0
 8008624:	b360      	cbz	r0, 8008680 <__ssputs_r+0xa0>
 8008626:	6921      	ldr	r1, [r4, #16]
 8008628:	464a      	mov	r2, r9
 800862a:	f000 faeb 	bl	8008c04 <memcpy>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	6126      	str	r6, [r4, #16]
 800863c:	6165      	str	r5, [r4, #20]
 800863e:	444e      	add	r6, r9
 8008640:	eba5 0509 	sub.w	r5, r5, r9
 8008644:	6026      	str	r6, [r4, #0]
 8008646:	60a5      	str	r5, [r4, #8]
 8008648:	463e      	mov	r6, r7
 800864a:	42be      	cmp	r6, r7
 800864c:	d900      	bls.n	8008650 <__ssputs_r+0x70>
 800864e:	463e      	mov	r6, r7
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	4632      	mov	r2, r6
 8008654:	4641      	mov	r1, r8
 8008656:	f000 faab 	bl	8008bb0 <memmove>
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	1b9b      	subs	r3, r3, r6
 800865e:	60a3      	str	r3, [r4, #8]
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	4433      	add	r3, r6
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	2000      	movs	r0, #0
 8008668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866c:	462a      	mov	r2, r5
 800866e:	f000 fad7 	bl	8008c20 <_realloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d1e0      	bne.n	800863a <__ssputs_r+0x5a>
 8008678:	6921      	ldr	r1, [r4, #16]
 800867a:	4650      	mov	r0, sl
 800867c:	f7ff feb8 	bl	80083f0 <_free_r>
 8008680:	230c      	movs	r3, #12
 8008682:	f8ca 3000 	str.w	r3, [sl]
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868c:	81a3      	strh	r3, [r4, #12]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008692:	e7e9      	b.n	8008668 <__ssputs_r+0x88>

08008694 <_svfiprintf_r>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	4698      	mov	r8, r3
 800869a:	898b      	ldrh	r3, [r1, #12]
 800869c:	061b      	lsls	r3, r3, #24
 800869e:	b09d      	sub	sp, #116	; 0x74
 80086a0:	4607      	mov	r7, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	4614      	mov	r4, r2
 80086a6:	d50e      	bpl.n	80086c6 <_svfiprintf_r+0x32>
 80086a8:	690b      	ldr	r3, [r1, #16]
 80086aa:	b963      	cbnz	r3, 80086c6 <_svfiprintf_r+0x32>
 80086ac:	2140      	movs	r1, #64	; 0x40
 80086ae:	f7ff ff0b 	bl	80084c8 <_malloc_r>
 80086b2:	6028      	str	r0, [r5, #0]
 80086b4:	6128      	str	r0, [r5, #16]
 80086b6:	b920      	cbnz	r0, 80086c2 <_svfiprintf_r+0x2e>
 80086b8:	230c      	movs	r3, #12
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c0:	e0d0      	b.n	8008864 <_svfiprintf_r+0x1d0>
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	616b      	str	r3, [r5, #20]
 80086c6:	2300      	movs	r3, #0
 80086c8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ca:	2320      	movs	r3, #32
 80086cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d4:	2330      	movs	r3, #48	; 0x30
 80086d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800887c <_svfiprintf_r+0x1e8>
 80086da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086de:	f04f 0901 	mov.w	r9, #1
 80086e2:	4623      	mov	r3, r4
 80086e4:	469a      	mov	sl, r3
 80086e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ea:	b10a      	cbz	r2, 80086f0 <_svfiprintf_r+0x5c>
 80086ec:	2a25      	cmp	r2, #37	; 0x25
 80086ee:	d1f9      	bne.n	80086e4 <_svfiprintf_r+0x50>
 80086f0:	ebba 0b04 	subs.w	fp, sl, r4
 80086f4:	d00b      	beq.n	800870e <_svfiprintf_r+0x7a>
 80086f6:	465b      	mov	r3, fp
 80086f8:	4622      	mov	r2, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff ff6f 	bl	80085e0 <__ssputs_r>
 8008702:	3001      	adds	r0, #1
 8008704:	f000 80a9 	beq.w	800885a <_svfiprintf_r+0x1c6>
 8008708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800870a:	445a      	add	r2, fp
 800870c:	9209      	str	r2, [sp, #36]	; 0x24
 800870e:	f89a 3000 	ldrb.w	r3, [sl]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80a1 	beq.w	800885a <_svfiprintf_r+0x1c6>
 8008718:	2300      	movs	r3, #0
 800871a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800871e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008722:	f10a 0a01 	add.w	sl, sl, #1
 8008726:	9304      	str	r3, [sp, #16]
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872e:	931a      	str	r3, [sp, #104]	; 0x68
 8008730:	4654      	mov	r4, sl
 8008732:	2205      	movs	r2, #5
 8008734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008738:	4850      	ldr	r0, [pc, #320]	; (800887c <_svfiprintf_r+0x1e8>)
 800873a:	f7f7 fd49 	bl	80001d0 <memchr>
 800873e:	9a04      	ldr	r2, [sp, #16]
 8008740:	b9d8      	cbnz	r0, 800877a <_svfiprintf_r+0xe6>
 8008742:	06d0      	lsls	r0, r2, #27
 8008744:	bf44      	itt	mi
 8008746:	2320      	movmi	r3, #32
 8008748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874c:	0711      	lsls	r1, r2, #28
 800874e:	bf44      	itt	mi
 8008750:	232b      	movmi	r3, #43	; 0x2b
 8008752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008756:	f89a 3000 	ldrb.w	r3, [sl]
 800875a:	2b2a      	cmp	r3, #42	; 0x2a
 800875c:	d015      	beq.n	800878a <_svfiprintf_r+0xf6>
 800875e:	9a07      	ldr	r2, [sp, #28]
 8008760:	4654      	mov	r4, sl
 8008762:	2000      	movs	r0, #0
 8008764:	f04f 0c0a 	mov.w	ip, #10
 8008768:	4621      	mov	r1, r4
 800876a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876e:	3b30      	subs	r3, #48	; 0x30
 8008770:	2b09      	cmp	r3, #9
 8008772:	d94d      	bls.n	8008810 <_svfiprintf_r+0x17c>
 8008774:	b1b0      	cbz	r0, 80087a4 <_svfiprintf_r+0x110>
 8008776:	9207      	str	r2, [sp, #28]
 8008778:	e014      	b.n	80087a4 <_svfiprintf_r+0x110>
 800877a:	eba0 0308 	sub.w	r3, r0, r8
 800877e:	fa09 f303 	lsl.w	r3, r9, r3
 8008782:	4313      	orrs	r3, r2
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	46a2      	mov	sl, r4
 8008788:	e7d2      	b.n	8008730 <_svfiprintf_r+0x9c>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	1d19      	adds	r1, r3, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	9103      	str	r1, [sp, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	bfbb      	ittet	lt
 8008796:	425b      	neglt	r3, r3
 8008798:	f042 0202 	orrlt.w	r2, r2, #2
 800879c:	9307      	strge	r3, [sp, #28]
 800879e:	9307      	strlt	r3, [sp, #28]
 80087a0:	bfb8      	it	lt
 80087a2:	9204      	strlt	r2, [sp, #16]
 80087a4:	7823      	ldrb	r3, [r4, #0]
 80087a6:	2b2e      	cmp	r3, #46	; 0x2e
 80087a8:	d10c      	bne.n	80087c4 <_svfiprintf_r+0x130>
 80087aa:	7863      	ldrb	r3, [r4, #1]
 80087ac:	2b2a      	cmp	r3, #42	; 0x2a
 80087ae:	d134      	bne.n	800881a <_svfiprintf_r+0x186>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	9203      	str	r2, [sp, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bfb8      	it	lt
 80087bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087c0:	3402      	adds	r4, #2
 80087c2:	9305      	str	r3, [sp, #20]
 80087c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800888c <_svfiprintf_r+0x1f8>
 80087c8:	7821      	ldrb	r1, [r4, #0]
 80087ca:	2203      	movs	r2, #3
 80087cc:	4650      	mov	r0, sl
 80087ce:	f7f7 fcff 	bl	80001d0 <memchr>
 80087d2:	b138      	cbz	r0, 80087e4 <_svfiprintf_r+0x150>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	eba0 000a 	sub.w	r0, r0, sl
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	4082      	lsls	r2, r0
 80087de:	4313      	orrs	r3, r2
 80087e0:	3401      	adds	r4, #1
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	4825      	ldr	r0, [pc, #148]	; (8008880 <_svfiprintf_r+0x1ec>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ee:	2206      	movs	r2, #6
 80087f0:	f7f7 fcee 	bl	80001d0 <memchr>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d038      	beq.n	800886a <_svfiprintf_r+0x1d6>
 80087f8:	4b22      	ldr	r3, [pc, #136]	; (8008884 <_svfiprintf_r+0x1f0>)
 80087fa:	bb1b      	cbnz	r3, 8008844 <_svfiprintf_r+0x1b0>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	3307      	adds	r3, #7
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	4433      	add	r3, r6
 800880c:	9309      	str	r3, [sp, #36]	; 0x24
 800880e:	e768      	b.n	80086e2 <_svfiprintf_r+0x4e>
 8008810:	fb0c 3202 	mla	r2, ip, r2, r3
 8008814:	460c      	mov	r4, r1
 8008816:	2001      	movs	r0, #1
 8008818:	e7a6      	b.n	8008768 <_svfiprintf_r+0xd4>
 800881a:	2300      	movs	r3, #0
 800881c:	3401      	adds	r4, #1
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	4619      	mov	r1, r3
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4620      	mov	r0, r4
 8008828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882c:	3a30      	subs	r2, #48	; 0x30
 800882e:	2a09      	cmp	r2, #9
 8008830:	d903      	bls.n	800883a <_svfiprintf_r+0x1a6>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c6      	beq.n	80087c4 <_svfiprintf_r+0x130>
 8008836:	9105      	str	r1, [sp, #20]
 8008838:	e7c4      	b.n	80087c4 <_svfiprintf_r+0x130>
 800883a:	fb0c 2101 	mla	r1, ip, r1, r2
 800883e:	4604      	mov	r4, r0
 8008840:	2301      	movs	r3, #1
 8008842:	e7f0      	b.n	8008826 <_svfiprintf_r+0x192>
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	462a      	mov	r2, r5
 800884a:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <_svfiprintf_r+0x1f4>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4638      	mov	r0, r7
 8008850:	f3af 8000 	nop.w
 8008854:	1c42      	adds	r2, r0, #1
 8008856:	4606      	mov	r6, r0
 8008858:	d1d6      	bne.n	8008808 <_svfiprintf_r+0x174>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	065b      	lsls	r3, r3, #25
 800885e:	f53f af2d 	bmi.w	80086bc <_svfiprintf_r+0x28>
 8008862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008864:	b01d      	add	sp, #116	; 0x74
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	ab03      	add	r3, sp, #12
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	462a      	mov	r2, r5
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <_svfiprintf_r+0x1f4>)
 8008872:	a904      	add	r1, sp, #16
 8008874:	4638      	mov	r0, r7
 8008876:	f000 f879 	bl	800896c <_printf_i>
 800887a:	e7eb      	b.n	8008854 <_svfiprintf_r+0x1c0>
 800887c:	08008cfc 	.word	0x08008cfc
 8008880:	08008d06 	.word	0x08008d06
 8008884:	00000000 	.word	0x00000000
 8008888:	080085e1 	.word	0x080085e1
 800888c:	08008d02 	.word	0x08008d02

08008890 <_printf_common>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	4616      	mov	r6, r2
 8008896:	4699      	mov	r9, r3
 8008898:	688a      	ldr	r2, [r1, #8]
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	bfb8      	it	lt
 80088a4:	4613      	movlt	r3, r2
 80088a6:	6033      	str	r3, [r6, #0]
 80088a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088ac:	4607      	mov	r7, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b10a      	cbz	r2, 80088b6 <_printf_common+0x26>
 80088b2:	3301      	adds	r3, #1
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	0699      	lsls	r1, r3, #26
 80088ba:	bf42      	ittt	mi
 80088bc:	6833      	ldrmi	r3, [r6, #0]
 80088be:	3302      	addmi	r3, #2
 80088c0:	6033      	strmi	r3, [r6, #0]
 80088c2:	6825      	ldr	r5, [r4, #0]
 80088c4:	f015 0506 	ands.w	r5, r5, #6
 80088c8:	d106      	bne.n	80088d8 <_printf_common+0x48>
 80088ca:	f104 0a19 	add.w	sl, r4, #25
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	6832      	ldr	r2, [r6, #0]
 80088d2:	1a9b      	subs	r3, r3, r2
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dc26      	bgt.n	8008926 <_printf_common+0x96>
 80088d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088dc:	1e13      	subs	r3, r2, #0
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	0692      	lsls	r2, r2, #26
 80088e6:	d42b      	bmi.n	8008940 <_printf_common+0xb0>
 80088e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ec:	4649      	mov	r1, r9
 80088ee:	4638      	mov	r0, r7
 80088f0:	47c0      	blx	r8
 80088f2:	3001      	adds	r0, #1
 80088f4:	d01e      	beq.n	8008934 <_printf_common+0xa4>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	6922      	ldr	r2, [r4, #16]
 80088fa:	f003 0306 	and.w	r3, r3, #6
 80088fe:	2b04      	cmp	r3, #4
 8008900:	bf02      	ittt	eq
 8008902:	68e5      	ldreq	r5, [r4, #12]
 8008904:	6833      	ldreq	r3, [r6, #0]
 8008906:	1aed      	subeq	r5, r5, r3
 8008908:	68a3      	ldr	r3, [r4, #8]
 800890a:	bf0c      	ite	eq
 800890c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008910:	2500      	movne	r5, #0
 8008912:	4293      	cmp	r3, r2
 8008914:	bfc4      	itt	gt
 8008916:	1a9b      	subgt	r3, r3, r2
 8008918:	18ed      	addgt	r5, r5, r3
 800891a:	2600      	movs	r6, #0
 800891c:	341a      	adds	r4, #26
 800891e:	42b5      	cmp	r5, r6
 8008920:	d11a      	bne.n	8008958 <_printf_common+0xc8>
 8008922:	2000      	movs	r0, #0
 8008924:	e008      	b.n	8008938 <_printf_common+0xa8>
 8008926:	2301      	movs	r3, #1
 8008928:	4652      	mov	r2, sl
 800892a:	4649      	mov	r1, r9
 800892c:	4638      	mov	r0, r7
 800892e:	47c0      	blx	r8
 8008930:	3001      	adds	r0, #1
 8008932:	d103      	bne.n	800893c <_printf_common+0xac>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893c:	3501      	adds	r5, #1
 800893e:	e7c6      	b.n	80088ce <_printf_common+0x3e>
 8008940:	18e1      	adds	r1, r4, r3
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	2030      	movs	r0, #48	; 0x30
 8008946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800894a:	4422      	add	r2, r4
 800894c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008954:	3302      	adds	r3, #2
 8008956:	e7c7      	b.n	80088e8 <_printf_common+0x58>
 8008958:	2301      	movs	r3, #1
 800895a:	4622      	mov	r2, r4
 800895c:	4649      	mov	r1, r9
 800895e:	4638      	mov	r0, r7
 8008960:	47c0      	blx	r8
 8008962:	3001      	adds	r0, #1
 8008964:	d0e6      	beq.n	8008934 <_printf_common+0xa4>
 8008966:	3601      	adds	r6, #1
 8008968:	e7d9      	b.n	800891e <_printf_common+0x8e>
	...

0800896c <_printf_i>:
 800896c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	7e0f      	ldrb	r7, [r1, #24]
 8008972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008974:	2f78      	cmp	r7, #120	; 0x78
 8008976:	4691      	mov	r9, r2
 8008978:	4680      	mov	r8, r0
 800897a:	460c      	mov	r4, r1
 800897c:	469a      	mov	sl, r3
 800897e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008982:	d807      	bhi.n	8008994 <_printf_i+0x28>
 8008984:	2f62      	cmp	r7, #98	; 0x62
 8008986:	d80a      	bhi.n	800899e <_printf_i+0x32>
 8008988:	2f00      	cmp	r7, #0
 800898a:	f000 80d4 	beq.w	8008b36 <_printf_i+0x1ca>
 800898e:	2f58      	cmp	r7, #88	; 0x58
 8008990:	f000 80c0 	beq.w	8008b14 <_printf_i+0x1a8>
 8008994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800899c:	e03a      	b.n	8008a14 <_printf_i+0xa8>
 800899e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089a2:	2b15      	cmp	r3, #21
 80089a4:	d8f6      	bhi.n	8008994 <_printf_i+0x28>
 80089a6:	a101      	add	r1, pc, #4	; (adr r1, 80089ac <_printf_i+0x40>)
 80089a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	08008a19 	.word	0x08008a19
 80089b4:	08008995 	.word	0x08008995
 80089b8:	08008995 	.word	0x08008995
 80089bc:	08008995 	.word	0x08008995
 80089c0:	08008995 	.word	0x08008995
 80089c4:	08008a19 	.word	0x08008a19
 80089c8:	08008995 	.word	0x08008995
 80089cc:	08008995 	.word	0x08008995
 80089d0:	08008995 	.word	0x08008995
 80089d4:	08008995 	.word	0x08008995
 80089d8:	08008b1d 	.word	0x08008b1d
 80089dc:	08008a45 	.word	0x08008a45
 80089e0:	08008ad7 	.word	0x08008ad7
 80089e4:	08008995 	.word	0x08008995
 80089e8:	08008995 	.word	0x08008995
 80089ec:	08008b3f 	.word	0x08008b3f
 80089f0:	08008995 	.word	0x08008995
 80089f4:	08008a45 	.word	0x08008a45
 80089f8:	08008995 	.word	0x08008995
 80089fc:	08008995 	.word	0x08008995
 8008a00:	08008adf 	.word	0x08008adf
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	1d1a      	adds	r2, r3, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	602a      	str	r2, [r5, #0]
 8008a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a14:	2301      	movs	r3, #1
 8008a16:	e09f      	b.n	8008b58 <_printf_i+0x1ec>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	0607      	lsls	r7, r0, #24
 8008a1e:	f103 0104 	add.w	r1, r3, #4
 8008a22:	6029      	str	r1, [r5, #0]
 8008a24:	d501      	bpl.n	8008a2a <_printf_i+0xbe>
 8008a26:	681e      	ldr	r6, [r3, #0]
 8008a28:	e003      	b.n	8008a32 <_printf_i+0xc6>
 8008a2a:	0646      	lsls	r6, r0, #25
 8008a2c:	d5fb      	bpl.n	8008a26 <_printf_i+0xba>
 8008a2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	da03      	bge.n	8008a3e <_printf_i+0xd2>
 8008a36:	232d      	movs	r3, #45	; 0x2d
 8008a38:	4276      	negs	r6, r6
 8008a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a3e:	485a      	ldr	r0, [pc, #360]	; (8008ba8 <_printf_i+0x23c>)
 8008a40:	230a      	movs	r3, #10
 8008a42:	e012      	b.n	8008a6a <_printf_i+0xfe>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	6820      	ldr	r0, [r4, #0]
 8008a48:	1d19      	adds	r1, r3, #4
 8008a4a:	6029      	str	r1, [r5, #0]
 8008a4c:	0605      	lsls	r5, r0, #24
 8008a4e:	d501      	bpl.n	8008a54 <_printf_i+0xe8>
 8008a50:	681e      	ldr	r6, [r3, #0]
 8008a52:	e002      	b.n	8008a5a <_printf_i+0xee>
 8008a54:	0641      	lsls	r1, r0, #25
 8008a56:	d5fb      	bpl.n	8008a50 <_printf_i+0xe4>
 8008a58:	881e      	ldrh	r6, [r3, #0]
 8008a5a:	4853      	ldr	r0, [pc, #332]	; (8008ba8 <_printf_i+0x23c>)
 8008a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008a5e:	bf0c      	ite	eq
 8008a60:	2308      	moveq	r3, #8
 8008a62:	230a      	movne	r3, #10
 8008a64:	2100      	movs	r1, #0
 8008a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a6a:	6865      	ldr	r5, [r4, #4]
 8008a6c:	60a5      	str	r5, [r4, #8]
 8008a6e:	2d00      	cmp	r5, #0
 8008a70:	bfa2      	ittt	ge
 8008a72:	6821      	ldrge	r1, [r4, #0]
 8008a74:	f021 0104 	bicge.w	r1, r1, #4
 8008a78:	6021      	strge	r1, [r4, #0]
 8008a7a:	b90e      	cbnz	r6, 8008a80 <_printf_i+0x114>
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	d04b      	beq.n	8008b18 <_printf_i+0x1ac>
 8008a80:	4615      	mov	r5, r2
 8008a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a86:	fb03 6711 	mls	r7, r3, r1, r6
 8008a8a:	5dc7      	ldrb	r7, [r0, r7]
 8008a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a90:	4637      	mov	r7, r6
 8008a92:	42bb      	cmp	r3, r7
 8008a94:	460e      	mov	r6, r1
 8008a96:	d9f4      	bls.n	8008a82 <_printf_i+0x116>
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d10b      	bne.n	8008ab4 <_printf_i+0x148>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	07de      	lsls	r6, r3, #31
 8008aa0:	d508      	bpl.n	8008ab4 <_printf_i+0x148>
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	6861      	ldr	r1, [r4, #4]
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	bfde      	ittt	le
 8008aaa:	2330      	movle	r3, #48	; 0x30
 8008aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ab0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ab4:	1b52      	subs	r2, r2, r5
 8008ab6:	6122      	str	r2, [r4, #16]
 8008ab8:	f8cd a000 	str.w	sl, [sp]
 8008abc:	464b      	mov	r3, r9
 8008abe:	aa03      	add	r2, sp, #12
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7ff fee4 	bl	8008890 <_printf_common>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d14a      	bne.n	8008b62 <_printf_i+0x1f6>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad0:	b004      	add	sp, #16
 8008ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	f043 0320 	orr.w	r3, r3, #32
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	4833      	ldr	r0, [pc, #204]	; (8008bac <_printf_i+0x240>)
 8008ae0:	2778      	movs	r7, #120	; 0x78
 8008ae2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	6829      	ldr	r1, [r5, #0]
 8008aea:	061f      	lsls	r7, r3, #24
 8008aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008af0:	d402      	bmi.n	8008af8 <_printf_i+0x18c>
 8008af2:	065f      	lsls	r7, r3, #25
 8008af4:	bf48      	it	mi
 8008af6:	b2b6      	uxthmi	r6, r6
 8008af8:	07df      	lsls	r7, r3, #31
 8008afa:	bf48      	it	mi
 8008afc:	f043 0320 	orrmi.w	r3, r3, #32
 8008b00:	6029      	str	r1, [r5, #0]
 8008b02:	bf48      	it	mi
 8008b04:	6023      	strmi	r3, [r4, #0]
 8008b06:	b91e      	cbnz	r6, 8008b10 <_printf_i+0x1a4>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	f023 0320 	bic.w	r3, r3, #32
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	2310      	movs	r3, #16
 8008b12:	e7a7      	b.n	8008a64 <_printf_i+0xf8>
 8008b14:	4824      	ldr	r0, [pc, #144]	; (8008ba8 <_printf_i+0x23c>)
 8008b16:	e7e4      	b.n	8008ae2 <_printf_i+0x176>
 8008b18:	4615      	mov	r5, r2
 8008b1a:	e7bd      	b.n	8008a98 <_printf_i+0x12c>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	6826      	ldr	r6, [r4, #0]
 8008b20:	6961      	ldr	r1, [r4, #20]
 8008b22:	1d18      	adds	r0, r3, #4
 8008b24:	6028      	str	r0, [r5, #0]
 8008b26:	0635      	lsls	r5, r6, #24
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	d501      	bpl.n	8008b30 <_printf_i+0x1c4>
 8008b2c:	6019      	str	r1, [r3, #0]
 8008b2e:	e002      	b.n	8008b36 <_printf_i+0x1ca>
 8008b30:	0670      	lsls	r0, r6, #25
 8008b32:	d5fb      	bpl.n	8008b2c <_printf_i+0x1c0>
 8008b34:	8019      	strh	r1, [r3, #0]
 8008b36:	2300      	movs	r3, #0
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	e7bc      	b.n	8008ab8 <_printf_i+0x14c>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	602a      	str	r2, [r5, #0]
 8008b44:	681d      	ldr	r5, [r3, #0]
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7f7 fb40 	bl	80001d0 <memchr>
 8008b50:	b108      	cbz	r0, 8008b56 <_printf_i+0x1ea>
 8008b52:	1b40      	subs	r0, r0, r5
 8008b54:	6060      	str	r0, [r4, #4]
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	e7aa      	b.n	8008ab8 <_printf_i+0x14c>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	462a      	mov	r2, r5
 8008b66:	4649      	mov	r1, r9
 8008b68:	4640      	mov	r0, r8
 8008b6a:	47d0      	blx	sl
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d0ad      	beq.n	8008acc <_printf_i+0x160>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	079b      	lsls	r3, r3, #30
 8008b74:	d413      	bmi.n	8008b9e <_printf_i+0x232>
 8008b76:	68e0      	ldr	r0, [r4, #12]
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	4298      	cmp	r0, r3
 8008b7c:	bfb8      	it	lt
 8008b7e:	4618      	movlt	r0, r3
 8008b80:	e7a6      	b.n	8008ad0 <_printf_i+0x164>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4632      	mov	r2, r6
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	47d0      	blx	sl
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d09d      	beq.n	8008acc <_printf_i+0x160>
 8008b90:	3501      	adds	r5, #1
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	9903      	ldr	r1, [sp, #12]
 8008b96:	1a5b      	subs	r3, r3, r1
 8008b98:	42ab      	cmp	r3, r5
 8008b9a:	dcf2      	bgt.n	8008b82 <_printf_i+0x216>
 8008b9c:	e7eb      	b.n	8008b76 <_printf_i+0x20a>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	f104 0619 	add.w	r6, r4, #25
 8008ba4:	e7f5      	b.n	8008b92 <_printf_i+0x226>
 8008ba6:	bf00      	nop
 8008ba8:	08008d0d 	.word	0x08008d0d
 8008bac:	08008d1e 	.word	0x08008d1e

08008bb0 <memmove>:
 8008bb0:	4288      	cmp	r0, r1
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	eb01 0402 	add.w	r4, r1, r2
 8008bb8:	d902      	bls.n	8008bc0 <memmove+0x10>
 8008bba:	4284      	cmp	r4, r0
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	d807      	bhi.n	8008bd0 <memmove+0x20>
 8008bc0:	1e43      	subs	r3, r0, #1
 8008bc2:	42a1      	cmp	r1, r4
 8008bc4:	d008      	beq.n	8008bd8 <memmove+0x28>
 8008bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bce:	e7f8      	b.n	8008bc2 <memmove+0x12>
 8008bd0:	4402      	add	r2, r0
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	428a      	cmp	r2, r1
 8008bd6:	d100      	bne.n	8008bda <memmove+0x2a>
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be2:	e7f7      	b.n	8008bd4 <memmove+0x24>

08008be4 <_sbrk_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d06      	ldr	r5, [pc, #24]	; (8008c00 <_sbrk_r+0x1c>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7f9 f884 	bl	8001cfc <_sbrk>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_sbrk_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_sbrk_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000640 	.word	0x20000640

08008c04 <memcpy>:
 8008c04:	440a      	add	r2, r1
 8008c06:	4291      	cmp	r1, r2
 8008c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c0c:	d100      	bne.n	8008c10 <memcpy+0xc>
 8008c0e:	4770      	bx	lr
 8008c10:	b510      	push	{r4, lr}
 8008c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1a:	4291      	cmp	r1, r2
 8008c1c:	d1f9      	bne.n	8008c12 <memcpy+0xe>
 8008c1e:	bd10      	pop	{r4, pc}

08008c20 <_realloc_r>:
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	4680      	mov	r8, r0
 8008c26:	4614      	mov	r4, r2
 8008c28:	460e      	mov	r6, r1
 8008c2a:	b921      	cbnz	r1, 8008c36 <_realloc_r+0x16>
 8008c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	4611      	mov	r1, r2
 8008c32:	f7ff bc49 	b.w	80084c8 <_malloc_r>
 8008c36:	b92a      	cbnz	r2, 8008c44 <_realloc_r+0x24>
 8008c38:	f7ff fbda 	bl	80083f0 <_free_r>
 8008c3c:	4625      	mov	r5, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c44:	f000 f81b 	bl	8008c7e <_malloc_usable_size_r>
 8008c48:	4284      	cmp	r4, r0
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	d802      	bhi.n	8008c54 <_realloc_r+0x34>
 8008c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c52:	d812      	bhi.n	8008c7a <_realloc_r+0x5a>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fc36 	bl	80084c8 <_malloc_r>
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d0ed      	beq.n	8008c3e <_realloc_r+0x1e>
 8008c62:	42bc      	cmp	r4, r7
 8008c64:	4622      	mov	r2, r4
 8008c66:	4631      	mov	r1, r6
 8008c68:	bf28      	it	cs
 8008c6a:	463a      	movcs	r2, r7
 8008c6c:	f7ff ffca 	bl	8008c04 <memcpy>
 8008c70:	4631      	mov	r1, r6
 8008c72:	4640      	mov	r0, r8
 8008c74:	f7ff fbbc 	bl	80083f0 <_free_r>
 8008c78:	e7e1      	b.n	8008c3e <_realloc_r+0x1e>
 8008c7a:	4635      	mov	r5, r6
 8008c7c:	e7df      	b.n	8008c3e <_realloc_r+0x1e>

08008c7e <_malloc_usable_size_r>:
 8008c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c82:	1f18      	subs	r0, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfbc      	itt	lt
 8008c88:	580b      	ldrlt	r3, [r1, r0]
 8008c8a:	18c0      	addlt	r0, r0, r3
 8008c8c:	4770      	bx	lr
	...

08008c90 <_init>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr

08008c9c <_fini>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr
